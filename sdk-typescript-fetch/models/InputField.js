"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * CureDAO Unified Health API
 * A community-owned platform for crowdsourced clinical research
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputFieldToJSON = exports.InputFieldFromJSONTyped = exports.InputFieldFromJSON = exports.InputFieldTypeEnum = void 0;
var runtime_1 = require("../runtime");
var _1 = require("./");
/**
* @export
* @enum {string}
*/
var InputFieldTypeEnum;
(function (InputFieldTypeEnum) {
    InputFieldTypeEnum["CheckBox"] = "check_box";
    InputFieldTypeEnum["Date"] = "date";
    InputFieldTypeEnum["Email"] = "email";
    InputFieldTypeEnum["Number"] = "number";
    InputFieldTypeEnum["PostalCode"] = "postal_code";
    InputFieldTypeEnum["SelectOption"] = "select_option";
    InputFieldTypeEnum["String"] = "string";
    InputFieldTypeEnum["Switch"] = "switch";
    InputFieldTypeEnum["TextArea"] = "text_area";
    InputFieldTypeEnum["Unit"] = "unit";
    InputFieldTypeEnum["VariableCategory"] = "variable_category";
})(InputFieldTypeEnum = exports.InputFieldTypeEnum || (exports.InputFieldTypeEnum = {}));
function InputFieldFromJSON(json) {
    return InputFieldFromJSONTyped(json, false);
}
exports.InputFieldFromJSON = InputFieldFromJSON;
function InputFieldFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'displayName': json['displayName'],
        'helpText': !(0, runtime_1.exists)(json, 'helpText') ? undefined : json['helpText'],
        'hint': !(0, runtime_1.exists)(json, 'hint') ? undefined : json['hint'],
        'icon': !(0, runtime_1.exists)(json, 'icon') ? undefined : json['icon'],
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'image': !(0, runtime_1.exists)(json, 'image') ? undefined : json['image'],
        'key': !(0, runtime_1.exists)(json, 'key') ? undefined : json['key'],
        'labelLeft': !(0, runtime_1.exists)(json, 'labelLeft') ? undefined : json['labelLeft'],
        'labelRight': !(0, runtime_1.exists)(json, 'labelRight') ? undefined : json['labelRight'],
        'link': !(0, runtime_1.exists)(json, 'link') ? undefined : json['link'],
        'maxLength': !(0, runtime_1.exists)(json, 'maxLength') ? undefined : json['maxLength'],
        'maxValue': !(0, runtime_1.exists)(json, 'maxValue') ? undefined : json['maxValue'],
        'minLength': !(0, runtime_1.exists)(json, 'minLength') ? undefined : json['minLength'],
        'minValue': !(0, runtime_1.exists)(json, 'minValue') ? undefined : json['minValue'],
        'options': !(0, runtime_1.exists)(json, 'options') ? undefined : json['options'],
        'placeholder': !(0, runtime_1.exists)(json, 'placeholder') ? undefined : json['placeholder'],
        'postUrl': !(0, runtime_1.exists)(json, 'postUrl') ? undefined : json['postUrl'],
        'required': !(0, runtime_1.exists)(json, 'required') ? undefined : json['required'],
        'show': !(0, runtime_1.exists)(json, 'show') ? undefined : json['show'],
        'submitButton': !(0, runtime_1.exists)(json, 'submitButton') ? undefined : (0, _1.ButtonFromJSON)(json['submitButton']),
        'type': json['type'],
        'validationPattern': !(0, runtime_1.exists)(json, 'validationPattern') ? undefined : json['validationPattern'],
        'value': !(0, runtime_1.exists)(json, 'value') ? undefined : json['value'],
    };
}
exports.InputFieldFromJSONTyped = InputFieldFromJSONTyped;
function InputFieldToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'displayName': value.displayName,
        'helpText': value.helpText,
        'hint': value.hint,
        'icon': value.icon,
        'id': value.id,
        'image': value.image,
        'key': value.key,
        'labelLeft': value.labelLeft,
        'labelRight': value.labelRight,
        'link': value.link,
        'maxLength': value.maxLength,
        'maxValue': value.maxValue,
        'minLength': value.minLength,
        'minValue': value.minValue,
        'options': value.options,
        'placeholder': value.placeholder,
        'postUrl': value.postUrl,
        'required': value.required,
        'show': value.show,
        'submitButton': (0, _1.ButtonToJSON)(value.submitButton),
        'type': value.type,
        'validationPattern': value.validationPattern,
        'value': value.value,
    };
}
exports.InputFieldToJSON = InputFieldToJSON;
//# sourceMappingURL=InputField.js.map
