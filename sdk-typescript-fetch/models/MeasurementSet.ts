/* tslint:disable */
/* eslint-disable */
/**
 * CureDAO Unified Health API
 * A platform for participant-centered research and personal data exploration
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MeasurementItem,
    MeasurementItemFromJSON,
    MeasurementItemFromJSONTyped,
    MeasurementItemToJSON,
} from './';

/**
 * 
 * @export
 * @interface MeasurementSet
 */
export interface MeasurementSet {
    /**
     * Way to aggregate measurements over time. SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
     * @type {string}
     * @memberof MeasurementSet
     */
    combinationOperation?: MeasurementSetCombinationOperationEnum;
    /**
     * Array of timestamps, values, and optional notes
     * @type {Array<MeasurementItem>}
     * @memberof MeasurementSet
     */
    measurementItems: Array<MeasurementItem>;
    /**
     * Name of the application or device used to record the measurement values
     * @type {string}
     * @memberof MeasurementSet
     */
    sourceName: string;
    /**
     * Unit of measurement
     * @type {string}
     * @memberof MeasurementSet
     */
    unitAbbreviatedName: string;
    /**
     * Ex: Emotions, Treatments, Symptoms...
     * @type {string}
     * @memberof MeasurementSet
     */
    variableCategoryName?: MeasurementSetVariableCategoryNameEnum;
    /**
     * ORIGINAL name of the variable for which we are creating the measurement records
     * @type {string}
     * @memberof MeasurementSet
     */
    variableName: string;
    /**
     * UPC or other barcode scan result
     * @type {string}
     * @memberof MeasurementSet
     */
    upc?: string;
}

/**
* @export
* @enum {string}
*/
export enum MeasurementSetCombinationOperationEnum {
    Mean = 'MEAN',
    Sum = 'SUM'
}/**
* @export
* @enum {string}
*/
export enum MeasurementSetVariableCategoryNameEnum {
    Activity = 'Activity',
    Books = 'Books',
    CausesOfIllness = 'Causes of Illness',
    CognitivePerformance = 'Cognitive Performance',
    Conditions = 'Conditions',
    Emotions = 'Emotions',
    Environment = 'Environment',
    Foods = 'Foods',
    Goals = 'Goals',
    Locations = 'Locations',
    Miscellaneous = 'Miscellaneous',
    MoviesAndTv = 'Movies and TV',
    Music = 'Music',
    Nutrients = 'Nutrients',
    Payments = 'Payments',
    PhysicalActivities = 'Physical Activities',
    Physique = 'Physique',
    Sleep = 'Sleep',
    SocialInteractions = 'Social Interactions',
    Software = 'Software',
    Symptoms = 'Symptoms',
    Treatments = 'Treatments',
    VitalSigns = 'Vital Signs'
}

export function MeasurementSetFromJSON(json: any): MeasurementSet {
    return MeasurementSetFromJSONTyped(json, false);
}

export function MeasurementSetFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeasurementSet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'combinationOperation': !exists(json, 'combinationOperation') ? undefined : json['combinationOperation'],
        'measurementItems': ((json['measurementItems'] as Array<any>).map(MeasurementItemFromJSON)),
        'sourceName': json['sourceName'],
        'unitAbbreviatedName': json['unitAbbreviatedName'],
        'variableCategoryName': !exists(json, 'variableCategoryName') ? undefined : json['variableCategoryName'],
        'variableName': json['variableName'],
        'upc': !exists(json, 'upc') ? undefined : json['upc'],
    };
}

export function MeasurementSetToJSON(value?: MeasurementSet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'combinationOperation': value.combinationOperation,
        'measurementItems': ((value.measurementItems as Array<any>).map(MeasurementItemToJSON)),
        'sourceName': value.sourceName,
        'unitAbbreviatedName': value.unitAbbreviatedName,
        'variableCategoryName': value.variableCategoryName,
        'variableName': value.variableName,
        'upc': value.upc,
    };
}


