"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * CureDAO Unified Health API
 * A community-owned platform for crowdsourced clinical research
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostUserVariablesVariableCategoryNameEnum = exports.GetVariablesVariableCategoryNameEnum = exports.VariablesApi = void 0;
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var VariablesApi = /** @class */ (function (_super) {
    __extends(VariablesApi, _super);
    function VariablesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete previously created user tags or ingredients.
     * Delete user tag or ingredient
     */
    VariablesApi.prototype.deleteUserTagRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.taggedVariableId !== undefined) {
                            queryParameters['taggedVariableId'] = requestParameters.taggedVariableId;
                        }
                        if (requestParameters.tagVariableId !== undefined) {
                            queryParameters['tagVariableId'] = requestParameters.tagVariableId;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/userTags/delete",
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.CommonResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Delete previously created user tags or ingredients.
     * Delete user tag or ingredient
     */
    VariablesApi.prototype.deleteUserTag = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteUserTagRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Users can delete all of their measurements for a variable
     * Delete All Measurements For Variable
     */
    VariablesApi.prototype.deleteUserVariableRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/userVariables/delete",
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Users can delete all of their measurements for a variable
     * Delete All Measurements For Variable
     */
    VariablesApi.prototype.deleteUserVariable = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteUserVariableRaw()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Goals.
     * Variable categories
     */
    VariablesApi.prototype.getVariableCategoriesRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/variableCategories",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.VariableCategoryFromJSON); })];
                }
            });
        });
    };
    /**
     * The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Goals.
     * Variable categories
     */
    VariablesApi.prototype.getVariableCategories = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getVariableCategoriesRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get variables. If the user has specified variable settings, these are provided instead of the common variable defaults.
     * Get variables along with related user-specific analysis settings and statistics
     */
    VariablesApi.prototype.getVariablesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.includeCharts !== undefined) {
                            queryParameters['includeCharts'] = requestParameters.includeCharts;
                        }
                        if (requestParameters.numberOfRawMeasurements !== undefined) {
                            queryParameters['numberOfRawMeasurements'] = requestParameters.numberOfRawMeasurements;
                        }
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        if (requestParameters.variableCategoryName !== undefined) {
                            queryParameters['variableCategoryName'] = requestParameters.variableCategoryName;
                        }
                        if (requestParameters.name !== undefined) {
                            queryParameters['name'] = requestParameters.name;
                        }
                        if (requestParameters.variableName !== undefined) {
                            queryParameters['variableName'] = requestParameters.variableName;
                        }
                        if (requestParameters.updatedAt !== undefined) {
                            queryParameters['updatedAt'] = requestParameters.updatedAt;
                        }
                        if (requestParameters.sourceName !== undefined) {
                            queryParameters['sourceName'] = requestParameters.sourceName;
                        }
                        if (requestParameters.earliestMeasurementTime !== undefined) {
                            queryParameters['earliestMeasurementTime'] = requestParameters.earliestMeasurementTime;
                        }
                        if (requestParameters.latestMeasurementTime !== undefined) {
                            queryParameters['latestMeasurementTime'] = requestParameters.latestMeasurementTime;
                        }
                        if (requestParameters.id !== undefined) {
                            queryParameters['id'] = requestParameters.id;
                        }
                        if (requestParameters.lastSourceName !== undefined) {
                            queryParameters['lastSourceName'] = requestParameters.lastSourceName;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        if (requestParameters.includePublic !== undefined) {
                            queryParameters['includePublic'] = requestParameters.includePublic;
                        }
                        if (requestParameters.manualTracking !== undefined) {
                            queryParameters['manualTracking'] = requestParameters.manualTracking;
                        }
                        if (requestParameters.clientId !== undefined) {
                            queryParameters['clientId'] = requestParameters.clientId;
                        }
                        if (requestParameters.upc !== undefined) {
                            queryParameters['upc'] = requestParameters.upc;
                        }
                        if (requestParameters.effectOrCause !== undefined) {
                            queryParameters['effectOrCause'] = requestParameters.effectOrCause;
                        }
                        if (requestParameters.publicEffectOrCause !== undefined) {
                            queryParameters['publicEffectOrCause'] = requestParameters.publicEffectOrCause;
                        }
                        if (requestParameters.exactMatch !== undefined) {
                            queryParameters['exactMatch'] = requestParameters.exactMatch;
                        }
                        if (requestParameters.variableCategoryId !== undefined) {
                            queryParameters['variableCategoryId'] = requestParameters.variableCategoryId;
                        }
                        if (requestParameters.includePrivate !== undefined) {
                            queryParameters['includePrivate'] = requestParameters.includePrivate;
                        }
                        if (requestParameters.searchPhrase !== undefined) {
                            queryParameters['searchPhrase'] = requestParameters.searchPhrase;
                        }
                        if (requestParameters.synonyms !== undefined) {
                            queryParameters['synonyms'] = requestParameters.synonyms;
                        }
                        if (requestParameters.taggedVariableId !== undefined) {
                            queryParameters['taggedVariableId'] = requestParameters.taggedVariableId;
                        }
                        if (requestParameters.tagVariableId !== undefined) {
                            queryParameters['tagVariableId'] = requestParameters.tagVariableId;
                        }
                        if (requestParameters.joinVariableId !== undefined) {
                            queryParameters['joinVariableId'] = requestParameters.joinVariableId;
                        }
                        if (requestParameters.parentUserTagVariableId !== undefined) {
                            queryParameters['parentUserTagVariableId'] = requestParameters.parentUserTagVariableId;
                        }
                        if (requestParameters.childUserTagVariableId !== undefined) {
                            queryParameters['childUserTagVariableId'] = requestParameters.childUserTagVariableId;
                        }
                        if (requestParameters.ingredientUserTagVariableId !== undefined) {
                            queryParameters['ingredientUserTagVariableId'] = requestParameters.ingredientUserTagVariableId;
                        }
                        if (requestParameters.ingredientOfUserTagVariableId !== undefined) {
                            queryParameters['ingredientOfUserTagVariableId'] = requestParameters.ingredientOfUserTagVariableId;
                        }
                        if (requestParameters.commonOnly !== undefined) {
                            queryParameters['commonOnly'] = requestParameters.commonOnly;
                        }
                        if (requestParameters.userOnly !== undefined) {
                            queryParameters['userOnly'] = requestParameters.userOnly;
                        }
                        if (requestParameters.includeTags !== undefined) {
                            queryParameters['includeTags'] = requestParameters.includeTags;
                        }
                        if (requestParameters.recalculate !== undefined) {
                            queryParameters['recalculate'] = requestParameters.recalculate;
                        }
                        if (requestParameters.variableId !== undefined) {
                            queryParameters['variableId'] = requestParameters.variableId;
                        }
                        if (requestParameters.concise !== undefined) {
                            queryParameters['concise'] = requestParameters.concise;
                        }
                        if (requestParameters.refresh !== undefined) {
                            queryParameters['refresh'] = requestParameters.refresh;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/variables",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.VariableFromJSON); })];
                }
            });
        });
    };
    /**
     * Get variables. If the user has specified variable settings, these are provided instead of the common variable defaults.
     * Get variables along with related user-specific analysis settings and statistics
     */
    VariablesApi.prototype.getVariables = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getVariablesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Post or update user tags or ingredients
     */
    VariablesApi.prototype.postUserTagsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling postUserTags.');
                        }
                        queryParameters = {};
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/userTags",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, models_1.UserTagToJSON)(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.CommonResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * Post or update user tags or ingredients
     */
    VariablesApi.prototype.postUserTags = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postUserTagsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
     * Update User Settings for a Variable
     */
    VariablesApi.prototype.postUserVariablesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.variable === null || requestParameters.variable === undefined) {
                            throw new runtime.RequiredError('variable', 'Required parameter requestParameters.variable was null or undefined when calling postUserVariables.');
                        }
                        queryParameters = {};
                        if (requestParameters.includePrivate !== undefined) {
                            queryParameters['includePrivate'] = requestParameters.includePrivate;
                        }
                        if (requestParameters.clientId !== undefined) {
                            queryParameters['clientId'] = requestParameters.clientId;
                        }
                        if (requestParameters.includePublic !== undefined) {
                            queryParameters['includePublic'] = requestParameters.includePublic;
                        }
                        if (requestParameters.searchPhrase !== undefined) {
                            queryParameters['searchPhrase'] = requestParameters.searchPhrase;
                        }
                        if (requestParameters.exactMatch !== undefined) {
                            queryParameters['exactMatch'] = requestParameters.exactMatch;
                        }
                        if (requestParameters.manualTracking !== undefined) {
                            queryParameters['manualTracking'] = requestParameters.manualTracking;
                        }
                        if (requestParameters.variableCategoryName !== undefined) {
                            queryParameters['variableCategoryName'] = requestParameters.variableCategoryName;
                        }
                        if (requestParameters.variableCategoryId !== undefined) {
                            queryParameters['variableCategoryId'] = requestParameters.variableCategoryId;
                        }
                        if (requestParameters.synonyms !== undefined) {
                            queryParameters['synonyms'] = requestParameters.synonyms;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/variables",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.variable.map(models_1.VariableToJSON),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.CommonResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
     * Update User Settings for a Variable
     */
    VariablesApi.prototype.postUserVariables = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postUserVariablesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset user settings for a variable to defaults
     * Reset user settings for a variable to defaults
     */
    VariablesApi.prototype.resetUserVariableSettingsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.userVariableDelete === null || requestParameters.userVariableDelete === undefined) {
                            throw new runtime.RequiredError('userVariableDelete', 'Required parameter requestParameters.userVariableDelete was null or undefined when calling resetUserVariableSettings.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/userVariables/reset",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, models_1.UserVariableDeleteToJSON)(requestParameters.userVariableDelete),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Reset user settings for a variable to defaults
     * Reset user settings for a variable to defaults
     */
    VariablesApi.prototype.resetUserVariableSettings = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resetUserVariableSettingsRaw(requestParameters)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return VariablesApi;
}(runtime.BaseAPI));
exports.VariablesApi = VariablesApi;
/**
    * @export
    * @enum {string}
    */
var GetVariablesVariableCategoryNameEnum;
(function (GetVariablesVariableCategoryNameEnum) {
    GetVariablesVariableCategoryNameEnum["Activities"] = "Activities";
    GetVariablesVariableCategoryNameEnum["Books"] = "Books";
    GetVariablesVariableCategoryNameEnum["CausesOfIllness"] = "Causes of Illness";
    GetVariablesVariableCategoryNameEnum["CognitivePerformance"] = "Cognitive Performance";
    GetVariablesVariableCategoryNameEnum["Conditions"] = "Conditions";
    GetVariablesVariableCategoryNameEnum["Emotions"] = "Emotions";
    GetVariablesVariableCategoryNameEnum["Environment"] = "Environment";
    GetVariablesVariableCategoryNameEnum["Foods"] = "Foods";
    GetVariablesVariableCategoryNameEnum["Location"] = "Location";
    GetVariablesVariableCategoryNameEnum["Miscellaneous"] = "Miscellaneous";
    GetVariablesVariableCategoryNameEnum["MoviesAndTv"] = "Movies and TV";
    GetVariablesVariableCategoryNameEnum["Music"] = "Music";
    GetVariablesVariableCategoryNameEnum["Nutrients"] = "Nutrients";
    GetVariablesVariableCategoryNameEnum["Payments"] = "Payments";
    GetVariablesVariableCategoryNameEnum["PhysicalActivity"] = "Physical Activity";
    GetVariablesVariableCategoryNameEnum["Physique"] = "Physique";
    GetVariablesVariableCategoryNameEnum["Sleep"] = "Sleep";
    GetVariablesVariableCategoryNameEnum["SocialInteractions"] = "Social Interactions";
    GetVariablesVariableCategoryNameEnum["Software"] = "Software";
    GetVariablesVariableCategoryNameEnum["Symptoms"] = "Symptoms";
    GetVariablesVariableCategoryNameEnum["Treatments"] = "Treatments";
    GetVariablesVariableCategoryNameEnum["VitalSigns"] = "Vital Signs";
    GetVariablesVariableCategoryNameEnum["Goals"] = "Goals";
})(GetVariablesVariableCategoryNameEnum = exports.GetVariablesVariableCategoryNameEnum || (exports.GetVariablesVariableCategoryNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PostUserVariablesVariableCategoryNameEnum;
(function (PostUserVariablesVariableCategoryNameEnum) {
    PostUserVariablesVariableCategoryNameEnum["Activities"] = "Activities";
    PostUserVariablesVariableCategoryNameEnum["Books"] = "Books";
    PostUserVariablesVariableCategoryNameEnum["CausesOfIllness"] = "Causes of Illness";
    PostUserVariablesVariableCategoryNameEnum["CognitivePerformance"] = "Cognitive Performance";
    PostUserVariablesVariableCategoryNameEnum["Conditions"] = "Conditions";
    PostUserVariablesVariableCategoryNameEnum["Emotions"] = "Emotions";
    PostUserVariablesVariableCategoryNameEnum["Environment"] = "Environment";
    PostUserVariablesVariableCategoryNameEnum["Foods"] = "Foods";
    PostUserVariablesVariableCategoryNameEnum["Location"] = "Location";
    PostUserVariablesVariableCategoryNameEnum["Miscellaneous"] = "Miscellaneous";
    PostUserVariablesVariableCategoryNameEnum["MoviesAndTv"] = "Movies and TV";
    PostUserVariablesVariableCategoryNameEnum["Music"] = "Music";
    PostUserVariablesVariableCategoryNameEnum["Nutrients"] = "Nutrients";
    PostUserVariablesVariableCategoryNameEnum["Payments"] = "Payments";
    PostUserVariablesVariableCategoryNameEnum["PhysicalActivity"] = "Physical Activity";
    PostUserVariablesVariableCategoryNameEnum["Physique"] = "Physique";
    PostUserVariablesVariableCategoryNameEnum["Sleep"] = "Sleep";
    PostUserVariablesVariableCategoryNameEnum["SocialInteractions"] = "Social Interactions";
    PostUserVariablesVariableCategoryNameEnum["Software"] = "Software";
    PostUserVariablesVariableCategoryNameEnum["Symptoms"] = "Symptoms";
    PostUserVariablesVariableCategoryNameEnum["Treatments"] = "Treatments";
    PostUserVariablesVariableCategoryNameEnum["VitalSigns"] = "Vital Signs";
    PostUserVariablesVariableCategoryNameEnum["Goals"] = "Goals";
})(PostUserVariablesVariableCategoryNameEnum = exports.PostUserVariablesVariableCategoryNameEnum || (exports.PostUserVariablesVariableCategoryNameEnum = {}));
//# sourceMappingURL=VariablesApi.js.map
