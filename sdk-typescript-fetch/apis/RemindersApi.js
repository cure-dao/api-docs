"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * CureDAO Unified Health API
 * A platform for participant-centered research and personal data exploration
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTrackingRemindersVariableCategoryNameEnum = exports.GetTrackingReminderNotificationsVariableCategoryNameEnum = exports.RemindersApi = void 0;
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var RemindersApi = /** @class */ (function (_super) {
    __extends(RemindersApi, _super);
    function RemindersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Stop getting notifications to record data for a variable.  Previously recorded measurements will be preserved.
     * Delete Tracking Reminder
     */
    RemindersApi.prototype.deleteTrackingReminderRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/trackingReminders/delete",
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.CommonResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Stop getting notifications to record data for a variable.  Previously recorded measurements will be preserved.
     * Delete Tracking Reminder
     */
    RemindersApi.prototype.deleteTrackingReminder = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteTrackingReminderRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Specific tracking reminder notification instances that still need to be tracked.
     * Get specific tracking reminder notifications
     */
    RemindersApi.prototype.getTrackingReminderNotificationsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        if (requestParameters.createdAt !== undefined) {
                            queryParameters['createdAt'] = requestParameters.createdAt;
                        }
                        if (requestParameters.updatedAt !== undefined) {
                            queryParameters['updatedAt'] = requestParameters.updatedAt;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.variableCategoryName !== undefined) {
                            queryParameters['variableCategoryName'] = requestParameters.variableCategoryName;
                        }
                        if (requestParameters.reminderTime !== undefined) {
                            queryParameters['reminderTime'] = requestParameters.reminderTime;
                        }
                        if (requestParameters.clientId !== undefined) {
                            queryParameters['clientId'] = requestParameters.clientId;
                        }
                        if (requestParameters.onlyPast !== undefined) {
                            queryParameters['onlyPast'] = requestParameters.onlyPast;
                        }
                        if (requestParameters.includeDeleted !== undefined) {
                            queryParameters['includeDeleted'] = requestParameters.includeDeleted;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/trackingReminderNotifications",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.GetTrackingReminderNotificationsResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Specific tracking reminder notification instances that still need to be tracked.
     * Get specific tracking reminder notifications
     */
    RemindersApi.prototype.getTrackingReminderNotifications = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTrackingReminderNotificationsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Users can be reminded to track certain variables at a specified frequency with a default value.
     * Get repeating tracking reminder settings
     */
    RemindersApi.prototype.getTrackingRemindersRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        if (requestParameters.variableCategoryName !== undefined) {
                            queryParameters['variableCategoryName'] = requestParameters.variableCategoryName;
                        }
                        if (requestParameters.createdAt !== undefined) {
                            queryParameters['createdAt'] = requestParameters.createdAt;
                        }
                        if (requestParameters.updatedAt !== undefined) {
                            queryParameters['updatedAt'] = requestParameters.updatedAt;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        if (requestParameters.clientId !== undefined) {
                            queryParameters['clientId'] = requestParameters.clientId;
                        }
                        if (requestParameters.appVersion !== undefined) {
                            queryParameters['appVersion'] = requestParameters.appVersion;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/trackingReminders",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.TrackingReminderFromJSON); })];
                }
            });
        });
    };
    /**
     * Users can be reminded to track certain variables at a specified frequency with a default value.
     * Get repeating tracking reminder settings
     */
    RemindersApi.prototype.getTrackingReminders = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTrackingRemindersRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Snooze, skip, or track a tracking reminder notification
     * Snooze, skip, or track a tracking reminder notification
     */
    RemindersApi.prototype.postTrackingReminderNotificationsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling postTrackingReminderNotifications.');
                        }
                        queryParameters = {};
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        if (requestParameters.clientId !== undefined) {
                            queryParameters['clientId'] = requestParameters.clientId;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/trackingReminderNotifications",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body.map(models_1.TrackingReminderNotificationPostToJSON),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.CommonResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Snooze, skip, or track a tracking reminder notification
     * Snooze, skip, or track a tracking reminder notification
     */
    RemindersApi.prototype.postTrackingReminderNotifications = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postTrackingReminderNotificationsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * This is to enable users to create reminders to track a variable with a default value at a specified frequency
     * Store a Tracking Reminder
     */
    RemindersApi.prototype.postTrackingRemindersRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling postTrackingReminders.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/trackingReminders",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body.map(models_1.TrackingReminderToJSON),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.PostTrackingRemindersResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * This is to enable users to create reminders to track a variable with a default value at a specified frequency
     * Store a Tracking Reminder
     */
    RemindersApi.prototype.postTrackingReminders = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postTrackingRemindersRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return RemindersApi;
}(runtime.BaseAPI));
exports.RemindersApi = RemindersApi;
/**
    * @export
    * @enum {string}
    */
var GetTrackingReminderNotificationsVariableCategoryNameEnum;
(function (GetTrackingReminderNotificationsVariableCategoryNameEnum) {
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Activities"] = "Activities";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Books"] = "Books";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["CausesOfIllness"] = "Causes of Illness";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["CognitivePerformance"] = "Cognitive Performance";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Conditions"] = "Conditions";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Emotions"] = "Emotions";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Environment"] = "Environment";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Foods"] = "Foods";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Location"] = "Location";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Miscellaneous"] = "Miscellaneous";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["MoviesAndTv"] = "Movies and TV";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Music"] = "Music";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Nutrients"] = "Nutrients";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Payments"] = "Payments";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["PhysicalActivity"] = "Physical Activity";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Physique"] = "Physique";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Sleep"] = "Sleep";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["SocialInteractions"] = "Social Interactions";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Software"] = "Software";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Symptoms"] = "Symptoms";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Treatments"] = "Treatments";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["VitalSigns"] = "Vital Signs";
    GetTrackingReminderNotificationsVariableCategoryNameEnum["Goals"] = "Goals";
})(GetTrackingReminderNotificationsVariableCategoryNameEnum = exports.GetTrackingReminderNotificationsVariableCategoryNameEnum || (exports.GetTrackingReminderNotificationsVariableCategoryNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetTrackingRemindersVariableCategoryNameEnum;
(function (GetTrackingRemindersVariableCategoryNameEnum) {
    GetTrackingRemindersVariableCategoryNameEnum["Activities"] = "Activities";
    GetTrackingRemindersVariableCategoryNameEnum["Books"] = "Books";
    GetTrackingRemindersVariableCategoryNameEnum["CausesOfIllness"] = "Causes of Illness";
    GetTrackingRemindersVariableCategoryNameEnum["CognitivePerformance"] = "Cognitive Performance";
    GetTrackingRemindersVariableCategoryNameEnum["Conditions"] = "Conditions";
    GetTrackingRemindersVariableCategoryNameEnum["Emotions"] = "Emotions";
    GetTrackingRemindersVariableCategoryNameEnum["Environment"] = "Environment";
    GetTrackingRemindersVariableCategoryNameEnum["Foods"] = "Foods";
    GetTrackingRemindersVariableCategoryNameEnum["Location"] = "Location";
    GetTrackingRemindersVariableCategoryNameEnum["Miscellaneous"] = "Miscellaneous";
    GetTrackingRemindersVariableCategoryNameEnum["MoviesAndTv"] = "Movies and TV";
    GetTrackingRemindersVariableCategoryNameEnum["Music"] = "Music";
    GetTrackingRemindersVariableCategoryNameEnum["Nutrients"] = "Nutrients";
    GetTrackingRemindersVariableCategoryNameEnum["Payments"] = "Payments";
    GetTrackingRemindersVariableCategoryNameEnum["PhysicalActivity"] = "Physical Activity";
    GetTrackingRemindersVariableCategoryNameEnum["Physique"] = "Physique";
    GetTrackingRemindersVariableCategoryNameEnum["Sleep"] = "Sleep";
    GetTrackingRemindersVariableCategoryNameEnum["SocialInteractions"] = "Social Interactions";
    GetTrackingRemindersVariableCategoryNameEnum["Software"] = "Software";
    GetTrackingRemindersVariableCategoryNameEnum["Symptoms"] = "Symptoms";
    GetTrackingRemindersVariableCategoryNameEnum["Treatments"] = "Treatments";
    GetTrackingRemindersVariableCategoryNameEnum["VitalSigns"] = "Vital Signs";
    GetTrackingRemindersVariableCategoryNameEnum["Goals"] = "Goals";
})(GetTrackingRemindersVariableCategoryNameEnum = exports.GetTrackingRemindersVariableCategoryNameEnum || (exports.GetTrackingRemindersVariableCategoryNameEnum = {}));
//# sourceMappingURL=RemindersApi.js.map