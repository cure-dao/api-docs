/* tslint:disable */
/* eslint-disable */
/**
 * CureDAO Unified Health API
 * A community-owned platform for crowdsourced clinical research
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CommonResponse,
    CommonResponseFromJSON,
    CommonResponseToJSON,
    Measurement,
    MeasurementFromJSON,
    MeasurementToJSON,
    MeasurementSet,
    MeasurementSetFromJSON,
    MeasurementSetToJSON,
    MeasurementUpdate,
    MeasurementUpdateFromJSON,
    MeasurementUpdateToJSON,
    PostMeasurementsResponse,
    PostMeasurementsResponseFromJSON,
    PostMeasurementsResponseToJSON,
} from '../models';

export interface GetMeasurementsRequest {
    variableName?: string;
    sort?: string;
    limit?: number;
    offset?: number;
    variableCategoryName?: GetMeasurementsVariableCategoryNameEnum;
    updatedAt?: string;
    userId?: number;
    sourceName?: string;
    connectorName?: string;
    value?: string;
    unitName?: GetMeasurementsUnitNameEnum;
    earliestMeasurementTime?: string;
    latestMeasurementTime?: string;
    createdAt?: string;
    id?: number;
    groupingWidth?: number;
    groupingTimezone?: string;
    doNotProcess?: boolean;
    clientId?: string;
    doNotConvert?: boolean;
    minMaxFilter?: boolean;
}

export interface MeasurementExportRequestRequest {
    userId?: number;
}

export interface PostMeasurementsRequest {
    body: Array<MeasurementSet>;
    userId?: number;
}

export interface UpdateMeasurementRequest {
    body: MeasurementUpdate;
}

/**
 * 
 */
export class MeasurementsApi extends runtime.BaseAPI {

    /**
     * Delete a previously submitted measurement
     * Delete a measurement
     */
    async deleteMeasurementRaw(): Promise<runtime.ApiResponse<CommonResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["writemeasurements"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/measurements/delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseFromJSON(jsonValue));
    }

    /**
     * Delete a previously submitted measurement
     * Delete a measurement
     */
    async deleteMeasurement(): Promise<CommonResponse> {
        const response = await this.deleteMeasurementRaw();
        return await response.value();
    }

    /**
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
     * Get measurements for this user
     */
    async getMeasurementsRaw(requestParameters: GetMeasurementsRequest): Promise<runtime.ApiResponse<Array<Measurement>>> {
        const queryParameters: any = {};

        if (requestParameters.variableName !== undefined) {
            queryParameters['variableName'] = requestParameters.variableName;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.variableCategoryName !== undefined) {
            queryParameters['variableCategoryName'] = requestParameters.variableCategoryName;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = requestParameters.updatedAt;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.sourceName !== undefined) {
            queryParameters['sourceName'] = requestParameters.sourceName;
        }

        if (requestParameters.connectorName !== undefined) {
            queryParameters['connectorName'] = requestParameters.connectorName;
        }

        if (requestParameters.value !== undefined) {
            queryParameters['value'] = requestParameters.value;
        }

        if (requestParameters.unitName !== undefined) {
            queryParameters['unitName'] = requestParameters.unitName;
        }

        if (requestParameters.earliestMeasurementTime !== undefined) {
            queryParameters['earliestMeasurementTime'] = requestParameters.earliestMeasurementTime;
        }

        if (requestParameters.latestMeasurementTime !== undefined) {
            queryParameters['latestMeasurementTime'] = requestParameters.latestMeasurementTime;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['createdAt'] = requestParameters.createdAt;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.groupingWidth !== undefined) {
            queryParameters['groupingWidth'] = requestParameters.groupingWidth;
        }

        if (requestParameters.groupingTimezone !== undefined) {
            queryParameters['groupingTimezone'] = requestParameters.groupingTimezone;
        }

        if (requestParameters.doNotProcess !== undefined) {
            queryParameters['doNotProcess'] = requestParameters.doNotProcess;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['clientId'] = requestParameters.clientId;
        }

        if (requestParameters.doNotConvert !== undefined) {
            queryParameters['doNotConvert'] = requestParameters.doNotConvert;
        }

        if (requestParameters.minMaxFilter !== undefined) {
            queryParameters['minMaxFilter'] = requestParameters.minMaxFilter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["readmeasurements"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/measurements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MeasurementFromJSON));
    }

    /**
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
     * Get measurements for this user
     */
    async getMeasurements(requestParameters: GetMeasurementsRequest): Promise<Array<Measurement>> {
        const response = await this.getMeasurementsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     * Post Request for Measurements CSV
     */
    async measurementExportRequestRaw(requestParameters: MeasurementExportRequestRequest): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/measurements/exportRequest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     * Post Request for Measurements CSV
     */
    async measurementExportRequest(requestParameters: MeasurementExportRequestRequest): Promise<number> {
        const response = await this.measurementExportRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
     * Post a new set or update existing measurements to the database
     */
    async postMeasurementsRaw(requestParameters: PostMeasurementsRequest): Promise<runtime.ApiResponse<PostMeasurementsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postMeasurements.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["writemeasurements"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/measurements/post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(MeasurementSetToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostMeasurementsResponseFromJSON(jsonValue));
    }

    /**
     * You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
     * Post a new set or update existing measurements to the database
     */
    async postMeasurements(requestParameters: PostMeasurementsRequest): Promise<PostMeasurementsResponse> {
        const response = await this.postMeasurementsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a previously submitted measurement
     * Update a measurement
     */
    async updateMeasurementRaw(requestParameters: UpdateMeasurementRequest): Promise<runtime.ApiResponse<CommonResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateMeasurement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3/measurements/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MeasurementUpdateToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseFromJSON(jsonValue));
    }

    /**
     * Update a previously submitted measurement
     * Update a measurement
     */
    async updateMeasurement(requestParameters: UpdateMeasurementRequest): Promise<CommonResponse> {
        const response = await this.updateMeasurementRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetMeasurementsVariableCategoryNameEnum {
    Activities = 'Activities',
    Books = 'Books',
    CausesOfIllness = 'Causes of Illness',
    CognitivePerformance = 'Cognitive Performance',
    Conditions = 'Conditions',
    Emotions = 'Emotions',
    Environment = 'Environment',
    Foods = 'Foods',
    Location = 'Location',
    Miscellaneous = 'Miscellaneous',
    MoviesAndTv = 'Movies and TV',
    Music = 'Music',
    Nutrients = 'Nutrients',
    Payments = 'Payments',
    PhysicalActivity = 'Physical Activity',
    Physique = 'Physique',
    Sleep = 'Sleep',
    SocialInteractions = 'Social Interactions',
    Software = 'Software',
    Symptoms = 'Symptoms',
    Treatments = 'Treatments',
    VitalSigns = 'Vital Signs',
    Goals = 'Goals'
}
/**
    * @export
    * @enum {string}
    */
export enum GetMeasurementsUnitNameEnum {
    RecommendedDailyAllowance = '% Recommended Daily Allowance',
    _4To4Rating = '-4 to 4 Rating',
    _0To1Rating = '0 to 1 Rating',
    _0To5Rating = '0 to 5 Rating',
    _1To10Rating = '1 to 10 Rating',
    _1To5Rating = '1 to 5 Rating',
    Applications = 'Applications',
    BeatsPerMinute = 'Beats per Minute',
    Calories = 'Calories',
    Capsules = 'Capsules',
    Centimeters = 'Centimeters',
    Count = 'Count',
    DegreesCelsius = 'Degrees Celsius',
    DegreesEast = 'Degrees East',
    DegreesFahrenheit = 'Degrees Fahrenheit',
    DegreesNorth = 'Degrees North',
    Dollars = 'Dollars',
    Drops = 'Drops',
    Event = 'Event',
    Feet = 'Feet',
    Grams = 'Grams',
    Hours = 'Hours',
    Inches = 'Inches',
    Index = 'Index',
    Kilocalories = 'Kilocalories',
    Kilograms = 'Kilograms',
    Kilometers = 'Kilometers',
    Liters = 'Liters',
    Meters = 'Meters',
    Micrograms = 'Micrograms',
    MicrogramsPerDecilitre = 'Micrograms per decilitre',
    Miles = 'Miles',
    Milligrams = 'Milligrams',
    Milliliters = 'Milliliters',
    Millimeters = 'Millimeters',
    MillimetersMerc = 'Millimeters Merc',
    Milliseconds = 'Milliseconds',
    Minutes = 'Minutes',
    Pascal = 'Pascal',
    Percent = 'Percent',
    Pieces = 'Pieces',
    Pills = 'Pills',
    Pounds = 'Pounds',
    Puffs = 'Puffs',
    Seconds = 'Seconds',
    Serving = 'Serving',
    Sprays = 'Sprays',
    Tablets = 'Tablets',
    Torr = 'Torr',
    Units = 'Units',
    YesNo = 'Yes/No',
    PerMinute = 'per Minute',
    Doses = 'Doses',
    Quarts = 'Quarts',
    Ounces = 'Ounces',
    InternationalUnits = 'International Units',
    MetersPerSecond = 'Meters per Second'
}
