"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * CureDAO Unified Health API
 * A community-owned platform for crowdsourced clinical research
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateConnectorConnectorNameEnum = exports.DisconnectConnectorConnectorNameEnum = exports.ConnectConnectorConnectorNameEnum = exports.ConnectorsApi = void 0;
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var ConnectorsApi = /** @class */ (function (_super) {
    __extends(ConnectorsApi, _super);
    function ConnectorsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
     * Obtain a token from 3rd party data source
     */
    ConnectorsApi.prototype.connectConnectorRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.connectorName === null || requestParameters.connectorName === undefined) {
                            throw new runtime.RequiredError('connectorName', 'Required parameter requestParameters.connectorName was null or undefined when calling connectConnector.');
                        }
                        queryParameters = {};
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/connectors/{connectorName}/connect".replace("{".concat("connectorName", "}"), encodeURIComponent(String(requestParameters.connectorName))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
     * Obtain a token from 3rd party data source
     */
    ConnectorsApi.prototype.connectConnector = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.connectConnectorRaw(requestParameters)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * The disconnect method deletes any stored tokens or connection information from the connectors database.
     * Delete stored connection info
     */
    ConnectorsApi.prototype.disconnectConnectorRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.connectorName === null || requestParameters.connectorName === undefined) {
                            throw new runtime.RequiredError('connectorName', 'Required parameter requestParameters.connectorName was null or undefined when calling disconnectConnector.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/connectors/{connectorName}/disconnect".replace("{".concat("connectorName", "}"), encodeURIComponent(String(requestParameters.connectorName))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * The disconnect method deletes any stored tokens or connection information from the connectors database.
     * Delete stored connection info
     */
    ConnectorsApi.prototype.disconnectConnector = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.disconnectConnectorRaw(requestParameters)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * List of Connectors
     */
    ConnectorsApi.prototype.getConnectorsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.clientId !== undefined) {
                            queryParameters['clientId'] = requestParameters.clientId;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/connectors/list",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.GetConnectorsResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * List of Connectors
     */
    ConnectorsApi.prototype.getConnectors = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getConnectorsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get embeddable connect javascript. Usage:   - Embedding in applications with popups for 3rd-party authentication windows.     Use `qmSetupInPopup` function after connecting `connect.js`.   - Embedding in applications with popups for 3rd-party authentication windows.     Requires a selector to block. It will be embedded in this block.     Use `qmSetupOnPage` function after connecting `connect.js`.   - Embedding in mobile applications without popups for 3rd-party authentication.     Use `qmSetupOnMobile` function after connecting `connect.js`.     If using in a Cordova application call  `qmSetupOnIonic` function after connecting `connect.js`.
     * Get embeddable connect javascript
     */
    ConnectorsApi.prototype.getIntegrationJsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.clientId !== undefined) {
                            queryParameters['clientId'] = requestParameters.clientId;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v3/integration.js",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Get embeddable connect javascript. Usage:   - Embedding in applications with popups for 3rd-party authentication windows.     Use `qmSetupInPopup` function after connecting `connect.js`.   - Embedding in applications with popups for 3rd-party authentication windows.     Requires a selector to block. It will be embedded in this block.     Use `qmSetupOnPage` function after connecting `connect.js`.   - Embedding in mobile applications without popups for 3rd-party authentication.     Use `qmSetupOnMobile` function after connecting `connect.js`.     If using in a Cordova application call  `qmSetupOnIonic` function after connecting `connect.js`.
     * Get embeddable connect javascript
     */
    ConnectorsApi.prototype.getIntegrationJs = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getIntegrationJsRaw(requestParameters)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user\'s access_token as a URL parameter like https://api.curedao.org/api/v3/connect/mobile?access_token=123
     * Mobile connect page
     */
    ConnectorsApi.prototype.getMobileConnectPageRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v3/connect/mobile",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user\'s access_token as a URL parameter like https://api.curedao.org/api/v3/connect/mobile?access_token=123
     * Mobile connect page
     */
    ConnectorsApi.prototype.getMobileConnectPage = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMobileConnectPageRaw(requestParameters)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
     * Sync with data source
     */
    ConnectorsApi.prototype.updateConnectorRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.connectorName === null || requestParameters.connectorName === undefined) {
                            throw new runtime.RequiredError('connectorName', 'Required parameter requestParameters.connectorName was null or undefined when calling updateConnector.');
                        }
                        queryParameters = {};
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/connectors/{connectorName}/update".replace("{".concat("connectorName", "}"), encodeURIComponent(String(requestParameters.connectorName))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
     * Sync with data source
     */
    ConnectorsApi.prototype.updateConnector = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateConnectorRaw(requestParameters)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ConnectorsApi;
}(runtime.BaseAPI));
exports.ConnectorsApi = ConnectorsApi;
/**
    * @export
    * @enum {string}
    */
var ConnectConnectorConnectorNameEnum;
(function (ConnectConnectorConnectorNameEnum) {
    ConnectConnectorConnectorNameEnum["Facebook"] = "facebook";
    ConnectConnectorConnectorNameEnum["Fitbit"] = "fitbit";
    ConnectConnectorConnectorNameEnum["Github"] = "github";
    ConnectConnectorConnectorNameEnum["Googlecalendar"] = "googlecalendar";
    ConnectConnectorConnectorNameEnum["Googlefit"] = "googlefit";
    ConnectConnectorConnectorNameEnum["Medhelper"] = "medhelper";
    ConnectConnectorConnectorNameEnum["Mint"] = "mint";
    ConnectConnectorConnectorNameEnum["Moodpanda"] = "moodpanda";
    ConnectConnectorConnectorNameEnum["Moodscope"] = "moodscope";
    ConnectConnectorConnectorNameEnum["Myfitnesspal"] = "myfitnesspal";
    ConnectConnectorConnectorNameEnum["Mynetdiary"] = "mynetdiary";
    ConnectConnectorConnectorNameEnum["Netatmo"] = "netatmo";
    ConnectConnectorConnectorNameEnum["Rescuetime"] = "rescuetime";
    ConnectConnectorConnectorNameEnum["Runkeeper"] = "runkeeper";
    ConnectConnectorConnectorNameEnum["Slack"] = "slack";
    ConnectConnectorConnectorNameEnum["Sleepcloud"] = "sleepcloud";
    ConnectConnectorConnectorNameEnum["Slice"] = "slice";
    ConnectConnectorConnectorNameEnum["Up"] = "up";
    ConnectConnectorConnectorNameEnum["Whatpulse"] = "whatpulse";
    ConnectConnectorConnectorNameEnum["Withings"] = "withings";
    ConnectConnectorConnectorNameEnum["Worldweatheronline"] = "worldweatheronline";
    ConnectConnectorConnectorNameEnum["Foursquare"] = "foursquare";
    ConnectConnectorConnectorNameEnum["Strava"] = "strava";
    ConnectConnectorConnectorNameEnum["Gmail"] = "gmail";
})(ConnectConnectorConnectorNameEnum = exports.ConnectConnectorConnectorNameEnum || (exports.ConnectConnectorConnectorNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var DisconnectConnectorConnectorNameEnum;
(function (DisconnectConnectorConnectorNameEnum) {
    DisconnectConnectorConnectorNameEnum["Facebook"] = "facebook";
    DisconnectConnectorConnectorNameEnum["Fitbit"] = "fitbit";
    DisconnectConnectorConnectorNameEnum["Github"] = "github";
    DisconnectConnectorConnectorNameEnum["Googlecalendar"] = "googlecalendar";
    DisconnectConnectorConnectorNameEnum["Googlefit"] = "googlefit";
    DisconnectConnectorConnectorNameEnum["Medhelper"] = "medhelper";
    DisconnectConnectorConnectorNameEnum["Mint"] = "mint";
    DisconnectConnectorConnectorNameEnum["Moodpanda"] = "moodpanda";
    DisconnectConnectorConnectorNameEnum["Moodscope"] = "moodscope";
    DisconnectConnectorConnectorNameEnum["Myfitnesspal"] = "myfitnesspal";
    DisconnectConnectorConnectorNameEnum["Mynetdiary"] = "mynetdiary";
    DisconnectConnectorConnectorNameEnum["Netatmo"] = "netatmo";
    DisconnectConnectorConnectorNameEnum["Rescuetime"] = "rescuetime";
    DisconnectConnectorConnectorNameEnum["Runkeeper"] = "runkeeper";
    DisconnectConnectorConnectorNameEnum["Slack"] = "slack";
    DisconnectConnectorConnectorNameEnum["Sleepcloud"] = "sleepcloud";
    DisconnectConnectorConnectorNameEnum["Slice"] = "slice";
    DisconnectConnectorConnectorNameEnum["Up"] = "up";
    DisconnectConnectorConnectorNameEnum["Whatpulse"] = "whatpulse";
    DisconnectConnectorConnectorNameEnum["Withings"] = "withings";
    DisconnectConnectorConnectorNameEnum["Worldweatheronline"] = "worldweatheronline";
    DisconnectConnectorConnectorNameEnum["Foursquare"] = "foursquare";
    DisconnectConnectorConnectorNameEnum["Strava"] = "strava";
    DisconnectConnectorConnectorNameEnum["Gmail"] = "gmail";
})(DisconnectConnectorConnectorNameEnum = exports.DisconnectConnectorConnectorNameEnum || (exports.DisconnectConnectorConnectorNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var UpdateConnectorConnectorNameEnum;
(function (UpdateConnectorConnectorNameEnum) {
    UpdateConnectorConnectorNameEnum["Facebook"] = "facebook";
    UpdateConnectorConnectorNameEnum["Fitbit"] = "fitbit";
    UpdateConnectorConnectorNameEnum["Github"] = "github";
    UpdateConnectorConnectorNameEnum["Googlecalendar"] = "googlecalendar";
    UpdateConnectorConnectorNameEnum["Googlefit"] = "googlefit";
    UpdateConnectorConnectorNameEnum["Medhelper"] = "medhelper";
    UpdateConnectorConnectorNameEnum["Mint"] = "mint";
    UpdateConnectorConnectorNameEnum["Moodpanda"] = "moodpanda";
    UpdateConnectorConnectorNameEnum["Moodscope"] = "moodscope";
    UpdateConnectorConnectorNameEnum["Myfitnesspal"] = "myfitnesspal";
    UpdateConnectorConnectorNameEnum["Mynetdiary"] = "mynetdiary";
    UpdateConnectorConnectorNameEnum["Netatmo"] = "netatmo";
    UpdateConnectorConnectorNameEnum["Rescuetime"] = "rescuetime";
    UpdateConnectorConnectorNameEnum["Runkeeper"] = "runkeeper";
    UpdateConnectorConnectorNameEnum["Slack"] = "slack";
    UpdateConnectorConnectorNameEnum["Sleepcloud"] = "sleepcloud";
    UpdateConnectorConnectorNameEnum["Slice"] = "slice";
    UpdateConnectorConnectorNameEnum["Up"] = "up";
    UpdateConnectorConnectorNameEnum["Whatpulse"] = "whatpulse";
    UpdateConnectorConnectorNameEnum["Withings"] = "withings";
    UpdateConnectorConnectorNameEnum["Worldweatheronline"] = "worldweatheronline";
    UpdateConnectorConnectorNameEnum["Foursquare"] = "foursquare";
    UpdateConnectorConnectorNameEnum["Strava"] = "strava";
    UpdateConnectorConnectorNameEnum["Gmail"] = "gmail";
})(UpdateConnectorConnectorNameEnum = exports.UpdateConnectorConnectorNameEnum || (exports.UpdateConnectorConnectorNameEnum = {}));
//# sourceMappingURL=ConnectorsApi.js.map
