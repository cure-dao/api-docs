/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.1
 */
export type AppSettings = {
  additionalSettings?: {};
  appDescription?: string;
  appDesign?: {};
  appDisplayName?: string;
  appStatus?: {};
  appType?: string;
  buildEnabled?: string;
  /*
   * Get yours at https:://builder.quantimo.do
   */
  clientId?: string;
  /*
   * Get yours at https:://builder.quantimo.do
   */
  clientSecret?: string;
  collaborators?: User[];
  createdAt?: string;
  /*
   * User id of the owner of the application
   *
   * @format int32
   */
  userId?: number;
  users?: User[];
  redirectUri?: string;
  companyName?: string;
  homepageUrl?: string;
  iconUrl?: string;
  longDescription?: string;
  splashScreen?: string;
  textLogo?: string;
};

export type AppSettingsResponse = {
  appSettings?: AppSettings;
  /*
   * Can be used as body of help info popup
   */
  description: string;
  /*
   * Can be used as title in help info popup
   */
  summary: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type AuthorizedClients = {
  /*
   * Applications with access to user measurements for all variables
   */
  apps: AppSettings[];
  /*
   * Individuals such as physicians or family members with access to user measurements for all variables
   */
  individuals: AppSettings[];
  /*
   * Studies with access to generally anonymous user measurements for a specific predictor and outcome variable
   */
  studies: AppSettings[];
};

export type Button = {
  /*
   * Ex: connect
   */
  accessibilityText?: string;
  /*
   * Action data
   */
  action?: {};
  /*
   * Ex: connect
   */
  additionalInformation?: string;
  /*
   * Ex: #f2f2f2
   */
  color?: string;
  /*
   * Text to show user before executing functionName
   */
  confirmationText?: string;
  /*
   * Name of function to call
   */
  functionName?: string;
  /*
   * Data to provide to functionName or be copied to the card parameters when button is clicked and card is posted to the API
   */
  parameters?: {};
  /*
   * Ex: connect
   */
  html?: string;
  /*
   * HTML element id
   */
  id?: string;
  /*
   * Ex: https://image.jpg
   */
  image?: string;
  /*
   * Ex: ion-refresh
   */
  ionIcon?: string;
  /*
   * Ex: https://local.quantimo.do
   */
  link: string;
  /*
   * State to go to
   */
  stateName?: string;
  /*
   * Data to provide to the state
   */
  stateParams?: {};
  /*
   * Text to show user after executing functionName
   */
  successToastText?: string;
  /*
   * Text to show user after executing functionName
   */
  successAlertTitle?: string;
  /*
   * Text to show user after executing functionName
   */
  successAlertBody?: string;
  /*
   * Ex: Connect
   */
  text: string;
  /*
   * Ex: This is a tooltip
   */
  tooltip?: string;
  /*
   * Post here on button click
   */
  webhookUrl?: string;
};

export type Card = {
  actionSheetButtons?: Button[];
  /*
   * Smaller square image
   */
  avatar?: string;
  /*
   * Smaller circular image
   */
  avatarCircular?: string;
  /*
   * Ex: #f2f2f2
   */
  backgroundColor?: string;
  buttons?: Button[];
  buttonsSecondary?: Button[];
  /*
   * Ex: Content
   */
  content?: string;
  /*
   * Ex: Title
   */
  headerTitle?: string;
  /*
   * HTML for the entire card.
   */
  html?: string;
  /*
   * Ex: <div>Content</div>
   */
  htmlContent?: string;
  /*
   * HTML element id
   */
  id: string;
  /*
   * Larger image of variable dimensions
   */
  image?: string;
  inputFields?: InputField[];
  /*
   * Ex: ion-refresh
   */
  ionIcon?: string;
  /*
   * A link to a web page or something. Not much more to say about that.
   */
  link?: string;
  /*
   * Key value pairs derived from user input fields, button clicks, or preset defaults
   */
  parameters?: {};
  relatedCards?: Card[];
  selectedButton?: Button;
  /*
   * Ex: sharingBody
   */
  sharingBody?: string;
  sharingButtons?: Button[];
  /*
   * Ex: sharingTitle
   */
  sharingTitle?: string;
  /*
   * Ex: subTitle
   */
  subHeader?: string;
  /*
   * Ex: subTitle
   */
  subTitle?: string;
  /*
   * Ex: Title
   */
  title?: string;
};

export type Chart = {
  /*
   * Highcharts config that can be used if you have highcharts.js included on the page
   */
  highchartConfig?: {};
  /*
   * Ex: correlationScatterPlot
   */
  chartId?: string;
  /*
   * Ex: Overall Mood following Sleep Duration (R = -0.173)
   */
  chartTitle?: string;
  /*
   * Ex: The chart above indicates that an increase in Sleep Duration is usually followed by an decrease in Overall Mood.
   */
  explanation?: string;
  /*
   * Url to a static svg of the chart
   */
  svgUrl?: string;
  /*
   * SVG string than can be embedded directly in HTML
   */
  svg?: string;
};

export type CommonResponse = {
  /*
   * Can be used as body of help info popup
   */
  description: string;
  /*
   * Can be used as title in help info popup
   */
  summary: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type ConnectInstructions = {
  /*
   * Create a form with these fields and post the key and user submitted value to the provided connect url
   */
  parameters?: {}[];
  /*
   * URL to open to connect
   */
  url: string;
  /*
   * True if should open auth window in popup
   */
  usePopup?: boolean;
};

export type ConversionStep = {
  /*
   * ADD or MULTIPLY
   */
  operation: "ADD" | "MULTIPLY";
  /*
   * This specifies the order of conversion steps starting with 0
   *
   * @format double
   */
  value: number;
};

export type Correlation = {
  /*
   * Ex: 4.19
   *
   * @format double
   */
  averageDailyHighCause?: number;
  /*
   * Ex: 1.97
   *
   * @format double
   */
  averageDailyLowCause?: number;
  /*
   * Ex: 3.0791054117396
   *
   * @format double
   */
  averageEffect?: number;
  /*
   * Ex: 3.55
   *
   * @format double
   */
  averageEffectFollowingHighCause?: number;
  /*
   * Ex: 2.65
   *
   * @format double
   */
  averageEffectFollowingLowCause?: number;
  /*
   * Ex: 0.396
   *
   * @format double
   */
  averageForwardPearsonCorrelationOverOnsetDelays?: number;
  /*
   * Ex: 0.453667
   *
   * @format double
   */
  averageReversePearsonCorrelationOverOnsetDelays?: number;
  /*
   * Ex: 0.9855
   */
  averageVote?: number;
  /*
   * Ex: 164
   */
  causeChanges?: number;
  causeDataSource?: DataSource;
  /*
   * Ex: 1
   */
  causeUserVariableShareUserMeasurements?: number;
  /*
   * Ex: 6
   */
  causeVariableCategoryId?: number;
  /*
   * Ex: Sleep
   */
  causeVariableCategoryName?: string;
  /*
   * Ex: MEAN
   */
  causeVariableCombinationOperation?: string;
  /*
   * Ex: /5
   */
  causeVariableUnitAbbreviatedName?: string;
  /*
   * Ex: 1448
   */
  causeVariableId?: number;
  /*
   * Ex: 6
   */
  causeVariableMostCommonConnectorId?: number;
  /*
   * Ex: Sleep Quality
   */
  causeVariableName: string;
  /*
   * Ex: 0.14344467795996
   *
   * @format double
   */
  confidenceInterval?: number;
  /*
   * Ex: high
   */
  confidenceLevel?: string;
  /*
   * Ex: 0.538
   *
   * @format double
   */
  correlationCoefficient?: number;
  /*
   * Ex: false
   */
  correlationIsContradictoryToOptimalValues?: boolean;
  /*
   * Ex: 2016-12-28 20:47:30 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  createdAt?: string;
  /*
   * Calculated Statistic: Ex: 1.646
   *
   * @format double
   */
  criticalTValue?: number;
  /*
   * Ex: higher
   */
  direction?: string;
  /*
   * User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Seconds
   */
  durationOfAction?: number;
  /*
   * User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Hours
   *
   * @format float
   */
  durationOfActionInHours?: number;
  /*
   * Ex: 200
   */
  degreesOfFreedom?: number;
  /*
   * Ex: 145
   */
  effectNumberOfProcessedDailyMeasurements?: number;
  /*
   * Ex: optimalPearsonProduct is not defined
   */
  error?: string;
  /*
   * Ex: 193
   */
  effectChanges?: number;
  effectDataSource?: DataSource;
  /*
   * Ex: moderately positive
   */
  effectSize?: string;
  /*
   * Ex: /5
   */
  effectUnit?: string;
  /*
   * Ex: 1
   */
  effectUserVariableShareUserMeasurements?: number;
  /*
   * Ex: 1
   */
  effectVariableCategoryId?: number;
  /*
   * Ex: Emotions
   */
  effectVariableCategoryName?: string;
  /*
   * Ex: MEAN
   */
  effectVariableCombinationOperation?: string;
  /*
   * Ex: Mood_(psychology)
   */
  effectVariableCommonAlias?: string;
  /*
   * Ex: /5
   */
  effectVariableUnitAbbreviatedName?: string;
  /*
   * Ex: 10
   */
  effectVariableUnitId?: number;
  /*
   * Ex: 1 to 5 Rating
   */
  effectVariableUnitName?: string;
  /*
   * Ex: 1398
   */
  effectVariableId?: number;
  /*
   * Ex: 10
   */
  effectVariableMostCommonConnectorId?: number;
  /*
   * Ex: Overall Mood
   */
  effectVariableName: string;
  /*
   * Ex: 2014-07-30 12:50:00 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  experimentEndTime?: string;
  /*
   * Ex: 2012-05-06 21:15:00 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  experimentStartTime?: string;
  /*
   * Ex: 0.528359
   *
   * @format double
   */
  forwardSpearmanCorrelationCoefficient?: number;
  /*
   * Ex: 298
   */
  numberOfPairs?: number;
  /*
   * Ex: 0
   */
  onsetDelay?: number;
  /*
   * Ex: 0
   *
   * @format float
   */
  onsetDelayInHours?: number;
  /*
   * Ex: -86400
   */
  onsetDelayWithStrongestPearsonCorrelation?: number;
  /*
   * Ex: -24
   *
   * @format float
   */
  onsetDelayWithStrongestPearsonCorrelationInHours?: number;
  /*
   * Ex: 0.68582816186982
   *
   * @format double
   */
  optimalPearsonProduct?: number;
  /*
   * User-Defined Variable Setting: Ex: -1. Unit: User-specified or common.
   */
  outcomeFillingValue?: number;
  /*
   * User-Defined Variable Setting: Ex: 23. Unit: User-specified or common.
   *
   * @format double
   */
  outcomeMaximumAllowedValue?: number;
  /*
   * User-Defined Variable Setting: Ex: 0.1. Unit: User-specified or common.
   *
   * @format double
   */
  outcomeMinimumAllowedValue?: number;
  /*
   * Ex: 0.477
   *
   * @format double
   */
  pearsonCorrelationWithNoOnsetDelay?: number;
  /*
   * Ex: 0.538
   *
   * @format double
   */
  predictivePearsonCorrelation?: number;
  /*
   * Ex: 0.538
   *
   * @format double
   */
  predictivePearsonCorrelationCoefficient?: number;
  /*
   * Ex: RescueTime
   */
  predictorDataSources?: string;
  /*
   * Ex: -1. Unit: User-specified or common.
   */
  predictorFillingValue?: number;
  /*
   * Ex: 200. Unit: User-specified or common.
   *
   * @format double
   */
  predictorMaximumAllowedValue?: number;
  /*
   * Ex: 30. Unit: User-specified or common.
   *
   * @format double
   */
  predictorMinimumAllowedValue?: number;
  /*
   * Ex: 17. Unit: User-specified or common.
   */
  predictsHighEffectChange?: number;
  /*
   * Ex: -11. Unit: User-specified or common.
   */
  predictsLowEffectChange?: number;
  /*
   * Ex: 0.39628900511586
   *
   * @format double
   */
  pValue?: number;
  /*
   * Ex: 0.528
   *
   * @format double
   */
  qmScore?: number;
  /*
   * Ex: 0.01377184270977
   *
   * @format double
   */
  reversePearsonCorrelationCoefficient?: number;
  /*
   * Would you like to make this study publicly visible?
   */
  shareUserMeasurements?: boolean;
  /*
   * Ex: N1 Study: Sleep Quality Predicts Higher Overall Mood
   */
  sharingDescription?: string;
  /*
   * Ex: N1 Study: Sleep Quality Predicts Higher Overall Mood
   */
  sharingTitle?: string;
  /*
   * Ex: 1
   */
  significantDifference?: boolean;
  /*
   * Ex: 0.9813
   *
   * @format double
   */
  statisticalSignificance?: number;
  /*
   * Ex: moderate
   */
  strengthLevel?: string;
  /*
   * Ex: 0.613
   *
   * @format double
   */
  strongestPearsonCorrelationCoefficient?: number;
  studyHtml?: StudyHtml;
  studyImages?: StudyImages;
  studyLinks?: StudyLinks;
  studyText?: StudyText;
  /*
   * Ex: 9.6986079652717
   *
   * @format double
   */
  tValue?: number;
  /*
   * Ex: 2017-05-06 15:40:38 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  updatedAt?: string;
  /*
   * Ex: 230
   */
  userId?: number;
  /*
   * Ex: 1
   */
  userVote?: number;
  /*
   * Ex: 4.14
   *
   * @format double
   */
  valuePredictingHighOutcome?: number;
  /*
   * Ex: 3.03
   *
   * @format double
   */
  valuePredictingLowOutcome?: number;
  /*
   * Sources used to collect data for the outcome variable
   */
  outcomeDataSources?: string;
  /*
   * Mike Sinn
   */
  principalInvestigator?: string;
  /*
   * Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation.
   */
  reverseCorrelation?: number;
  /*
   * Ex:
   *
   * @format float
   */
  averagePearsonCorrelationCoefficientOverOnsetDelays?: number;
  /*
   * Ex: 14764
   */
  causeNumberOfRawMeasurements?: number;
  /*
   * Correlations calculated with various duration of action hyper-parameters
   */
  correlationsOverDurationsOfAction?: Correlation[];
  /*
   * Correlations calculated with various onset delay hyper-parameters
   */
  correlationsOverOnsetDelays?: Correlation[];
  /*
   * Highchart config illustrating correlations calculated with various duration of action hyper-parameters
   */
  correlationsOverDurationsOfActionChartConfig?: {};
  /*
   * Highchart config illustrating correlations calculated with various onset delay hyper-parameters
   */
  correlationsOverOnsetDelaysChartConfig?: {};
  /*
   * Ex: 1
   */
  numberOfUsers?: number;
  /*
   * Ex: 1
   *
   * @format double
   */
  rawCauseMeasurementSignificance?: number;
  /*
   * Ex: 1
   *
   * @format double
   */
  rawEffectMeasurementSignificance?: number;
  /*
   * Ex: 1
   */
  reversePairsCount?: string;
  /*
   * Ex: 1
   */
  voteStatisticalSignificance?: number;
  /*
   * Ex: 0.011598441286655
   *
   * @format double
   */
  aggregateQMScore?: number;
  /*
   * Ex: 0.0333
   *
   * @format double
   */
  forwardPearsonCorrelationCoefficient?: number;
  /*
   * Ex: 6
   */
  numberOfCorrelations?: number;
  /*
   * Ex: 1 or 0
   */
  vote?: number;
};

export type DataSource = {
  /*
   * Ex: true
   */
  affiliate: boolean;
  /*
   * Background color HEX code that matches the icon
   */
  backgroundColor?: string;
  buttons?: Button[];
  card?: Card;
  /*
   * Your CureDAO client id can be obtained by creating an app at https://builder.curedao.org
   */
  clientId?: string;
  /*
   * True if the authenticated user has this connector enabled
   */
  connected?: boolean;
  /*
   * Ex: Your token is expired. Please re-connect
   */
  connectError?: string;
  connectInstructions?: ConnectInstructions;
  /*
   * Ex: 8
   */
  connectorId?: number;
  /*
   * Ex: CONNECTED
   */
  connectStatus?: string;
  /*
   * Number of measurements from this source or number of users who have measurements from this source
   */
  count?: number;
  /*
   * Ex: 2000-01-01 00:00:00 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  createdAt?: string;
  /*
   * Ex: ba7d0c12432650e23b3ce924ae2d21e2ff59e7e4e28650759633700af7ed0a30
   */
  connectorClientId: string;
  /*
   * Ex: Foods
   */
  defaultVariableCategoryName: string;
  /*
   * Ex: CureDAO
   */
  displayName: string;
  /*
   * Ex: 0
   */
  enabled: number;
  /*
   * Ex: https://curedao.org
   */
  getItUrl: string;
  /*
   * Ex: 72
   */
  id: number;
  /*
   * Ex: https://app.curedao.org/img/logos/curedao-logo-qm-rainbow-200-200.png
   */
  image: string;
  /*
   * Ex: <a href="https://curedao.org"><img id="curedao_image" title="CureDAO" src="https://app.curedao.org/img/logos/curedao-logo-qm-rainbow-200-200.png" alt="CureDAO"></a>
   */
  imageHtml: string;
  /*
   * Ex: 2017-07-31 10:10:34 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  lastSuccessfulUpdatedAt?: string;
  /*
   * Epoch timestamp of last sync
   */
  lastUpdate?: number;
  /*
   * Ex: <a href="https://curedao.org">CureDAO</a>
   */
  linkedDisplayNameHtml: string;
  /*
   * Ex: CureDAO is a Chrome extension, Android app, iOS app, and web app that allows you to easily track mood, symptoms, or any outcome you want to optimize in a fraction of a second.  You can also import your data from over 30 other apps and devices like Fitbit, Rescuetime, Jawbone Up, Withings, Facebook, Github, Google Calendar, Runkeeper, MoodPanda, Slice, Google Fit, and more.  CureDAO then analyzes your data to identify which hidden factors are most likely to be influencing your mood or symptoms and their optimal daily values.
   */
  longDescription: string;
  /*
   * Ex: Got 412 new measurements on 2017-07-31 10:10:34
   */
  message?: string;
  /*
   * Mobile connect method: webview, cordova, google, spreadsheet, or ip
   */
  mobileConnectMethod?: string;
  /*
   * Ex: curedao
   */
  name: string;
  /*
   * Platforms (chrome, android, ios, web) that you can connect on.
   */
  platforms?: string[];
  /*
   * True if connection requires upgrade
   */
  premium?: boolean;
  /*
   * Required connector scopes
   */
  scopes?: string[];
  /*
   * Ex: Tracks anything
   */
  shortDescription: string;
  /*
   * URL to POST a spreadsheet to (if available for this data source)
   */
  spreadsheetUploadLink?: string;
  /*
   * Number of measurements obtained during latest update
   */
  totalMeasurementsInLastUpdate?: number;
  /*
   * Ex: 2017-07-31 10:10:34 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  updatedAt?: string;
  /*
   * Ex: 2017-07-18 05:16:31 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  updateRequestedAt?: string;
  /*
   * Ex: UPDATED
   */
  updateStatus?: string;
  /*
   * Ex: 230
   */
  userId?: number;
};

export type DeviceToken = {
  /*
   * Client id
   */
  clientId?: string;
  /*
   * ios, android, or web
   */
  platform: string;
  /*
   * The device token
   */
  deviceToken: string;
};

export type ErrorResponse = {
  /*
   * Error message
   */
  message: string;
};

export type Explanation = {
  /*
   * Ex: These factors are most predictive of Overall Mood based on your own data.
   */
  description: string;
  image: Image;
  /*
   * Ex: ion-ios-person
   */
  ionIcon: string;
  startTracking: ExplanationStartTracking;
  /*
   * Ex: Top Predictors of Overall Mood
   */
  title: string;
  /*
   * Embeddable list of study summaries with explanation at the top
   */
  html?: string;
};

export type ExplanationStartTracking = {
  button: Button;
  /*
   * Ex: The more data I have the more accurate your results will be so track regularly!
   */
  description: string;
  /*
   * Ex: Improve Accuracy
   */
  title: string;
};

export type InputField = {
  displayName: string;
  helpText?: string;
  hint?: string;
  icon?: string;
  /*
   * HTML element id
   */
  id?: string;
  image?: string;
  key?: string;
  labelLeft?: string;
  labelRight?: string;
  link?: string;
  maxLength?: number;
  maxValue?: number;
  minLength?: number;
  minValue?: number;
  /*
   * Selector list options
   */
  options?: string[];
  /*
   * Ex: Title
   */
  placeholder?: string;
  postUrl?: string;
  required?: boolean;
  /*
   * Ex: Title
   */
  show?: boolean;
  submitButton?: Button;
  /*
   * Ex: Title
   */
  type:
    | "check_box"
    | "date"
    | "email"
    | "number"
    | "postal_code"
    | "select_option"
    | "string"
    | "switch"
    | "text_area"
    | "unit"
    | "variable_category";
  /*
   * See https://html5pattern.com/ for examples
   */
  validationPattern?: string;
  value?: string;
};

export type GetConnectorsResponse = {
  connectors?: DataSource[];
  /*
   * Can be used as body of help info popup
   */
  description: string;
  /*
   * Can be used as title in help info popup
   */
  summary: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type GetCorrelationsDataResponse = {
  correlations: Correlation[];
  explanation: Explanation;
  /*
   * Can be used as body of help info popup
   */
  description?: string;
  /*
   * Can be used as title in help info popup
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type GetCorrelationsResponse = {
  data?: GetCorrelationsDataResponse;
  /*
   * Can be used as body of help info popup
   */
  description: string;
  /*
   * Can be used as title in help info popup
   */
  summary: string;
  /*
   * Square icon png url
   */
  avatar?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type GetStudiesResponse = {
  studies?: Study[];
  /*
   * Ex: These factors are most predictive of Overall Mood based on your own data.
   */
  description: string;
  /*
   * Can be used as title in help info popup
   */
  summary: string;
  image?: Image;
  /*
   * Square icon png url
   */
  avatar?: string;
  /*
   * Ex: ion-ios-person
   */
  ionIcon?: string;
  startTracking?: ExplanationStartTracking;
  /*
   * Ex: Top Predictors of Overall Mood
   */
  title?: string;
  /*
   * Embeddable list of study summaries with explanation at the top
   */
  html?: string;
};

export type GetSharesResponse = {
  authorizedClients?: AuthorizedClients;
  /*
   * Can be used as body of help info popup
   */
  description: string;
  /*
   * Can be used as title in help info popup
   */
  summary: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type FeedResponse = {
  cards: Card[];
  /*
   * Tracking reminder notifications, messages, and study result cards that can be displayed in user feed or stream
   */
  description: string;
  /*
   * Tracking reminder notifications, messages, and study results
   */
  summary: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type GetTrackingReminderNotificationsResponse = {
  data?: TrackingReminderNotification[];
  /*
   * Can be used as body of help info popup
   */
  description: string;
  /*
   * Can be used as title in help info popup
   */
  summary: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type Image = {
  /*
   * Ex: 240
   */
  height: string;
  /*
   * Ex: https://www.filepicker.io/api/file/TjmeNWS5Q2SFmtJlUGLf
   */
  imageUrl: string;
  /*
   * Ex: 224
   */
  width: string;
};

export type JsonErrorResponse = {
  /*
   * Error message
   */
  message?: string;
  /*
   * Can be used as body of help info popup
   */
  description?: string;
  /*
   * Can be used as title in help info popup
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type Measurement = {
  card?: Card;
  /*
   * Ex: curedao
   */
  clientId?: string;
  /*
   * Ex: 13
   */
  connectorId?: number;
  /*
   * Ex: 2017-07-30 21:08:36
   */
  createdAt?: string;
  /*
   * Examples: 3/5, $10, or 1 count
   */
  displayValueAndUnitString?: string;
  /*
   * Ex: ion-sad-outline
   */
  iconIcon?: string;
  /*
   * Ex: 1051466127
   */
  id?: number;
  /*
   * Ex: value
   */
  inputType?: string;
  /*
   * Ex: ion-ios-medkit-outline
   */
  ionIcon?: string;
  /*
   * Ex: 1
   */
  manualTracking?: boolean;
  /*
   * Ex: 5. Unit: User-specified or common.
   *
   * @format double
   */
  maximumAllowedValue?: number;
  /*
   * Ex: 1. Unit: User-specified or common.
   *
   * @format double
   */
  minimumAllowedValue?: number;
  /*
   * Note of measurement
   */
  note?: string;
  /*
   * Additional meta data for the measurement
   */
  noteObject?: {};
  /*
   * Embeddable HTML with message hyperlinked with associated url
   */
  noteHtml?: {};
  /*
   * Ex: 23
   */
  originalUnitId?: number;
  /*
   * Original value submitted. Unit: Originally submitted.
   *
   * @format double
   */
  originalValue?: number;
  /*
   * Ex: img/variable_categories/treatments.png
   */
  pngPath?: string;
  /*
   * Ex: https://app.curedao.org/img/variable_categories/treatments.png
   */
  pngUrl?: string;
  /*
   * Link to associated product for purchase
   */
  productUrl?: string;
  /*
   * Application or device used to record the measurement values
   */
  sourceName: string;
  /*
   * Ex: 2014-08-27
   */
  startDate?: string;
  /*
   * Seconds between the start of the event measured and 1970 (Unix timestamp)
   */
  startTimeEpoch?: number;
  /*
   * Start Time for the measurement event in UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  startTimeString: string;
  /*
   * Ex: https://app.curedao.org/img/variable_categories/treatments.svg
   */
  svgUrl?: string;
  /*
   * Abbreviated name for the unit of measurement
   */
  unitAbbreviatedName: string;
  /*
   * Ex: 6
   */
  unitCategoryId?: number;
  /*
   * Ex: Miscellany
   */
  unitCategoryName?: string;
  /*
   * Ex: 23
   */
  unitId?: number;
  /*
   * Ex: Count
   */
  unitName?: string;
  /*
   * Ex: 2017-07-30 21:08:36
   */
  updatedAt?: string;
  /*
   * Link to associated Facebook like or Github commit, for instance
   */
  url?: string;
  /*
   * Ex: count
   */
  userVariableUnitAbbreviatedName?: string;
  /*
   * Ex: 6
   */
  userVariableUnitCategoryId?: number;
  /*
   * Ex: Miscellany
   */
  userVariableUnitCategoryName?: string;
  /*
   * Ex: 23
   */
  userVariableUnitId?: number;
  /*
   * Ex: Count
   */
  userVariableUnitName?: string;
  /*
   * Ex: 13
   */
  userVariableVariableCategoryId?: number;
  /*
   * Ex: Treatments
   */
  userVariableVariableCategoryName?: string;
  /*
   * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables.
   */
  valence?: string;
  /*
   * Converted measurement value in requested unit
   *
   * @format double
   */
  value: number;
  /*
   * Ex: 13
   */
  variableCategoryId?: number;
  /*
   * Ex: https://static.quantimo.do/img/variable_categories/pill-96.png
   */
  variableCategoryImageUrl?: string;
  /*
   * Ex: Emotions, Treatments, Symptoms...
   */
  variableCategoryName?:
    | "Activity"
    | "Books"
    | "Causes of Illness"
    | "Cognitive Performance"
    | "Conditions"
    | "Emotions"
    | "Environment"
    | "Foods"
    | "Goals"
    | "Locations"
    | "Miscellaneous"
    | "Movies and TV"
    | "Music"
    | "Nutrients"
    | "Payments"
    | "Physical Activities"
    | "Physique"
    | "Sleep"
    | "Social Interactions"
    | "Software"
    | "Symptoms"
    | "Treatments"
    | "Vital Signs";
  /*
   * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables.
   */
  variableDescription?: string;
  /*
   * Ex: 5956846
   */
  variableId?: number;
  /*
   * Name of the variable for which we are creating the measurement records
   */
  variableName: string;
  /*
   * Ex: Trader Joe's Bedtime Tea
   */
  displayName?: string;
};

export type MeasurementItem = {
  /*
   * Optional note to include with the measurement
   */
  note?: string;
  /*
   * Timestamp for the measurement event in epoch time (unixtime)
   *
   * @format int64
   */
  timestamp: number;
  /*
   * Measurement value
   *
   * @format double
   */
  value: number;
};

export type MeasurementSet = {
  /*
   * Way to aggregate measurements over time. SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
   */
  combinationOperation?: "MEAN" | "SUM";
  /*
   * Array of timestamps, values, and optional notes
   */
  measurementItems: MeasurementItem[];
  /*
   * Name of the application or device used to record the measurement values
   */
  sourceName: string;
  /*
   * Unit of measurement
   */
  unitAbbreviatedName: string;
  /*
   * Ex: Emotions, Treatments, Symptoms...
   */
  variableCategoryName?:
    | "Activity"
    | "Books"
    | "Causes of Illness"
    | "Cognitive Performance"
    | "Conditions"
    | "Emotions"
    | "Environment"
    | "Foods"
    | "Goals"
    | "Locations"
    | "Miscellaneous"
    | "Movies and TV"
    | "Music"
    | "Nutrients"
    | "Payments"
    | "Physical Activities"
    | "Physique"
    | "Sleep"
    | "Social Interactions"
    | "Software"
    | "Symptoms"
    | "Treatments"
    | "Vital Signs";
  /*
   * ORIGINAL name of the variable for which we are creating the measurement records
   */
  variableName: string;
  /*
   * UPC or other barcode scan result
   */
  upc?: string;
};

export type MeasurementUpdate = {
  /*
   * Variable id of the measurement to be updated
   */
  id: number;
  /*
   * The new note for the measurement (optional)
   */
  note?: string;
  /*
   * The new timestamp for the the event in epoch seconds (optional)
   */
  startTime?: number;
  /*
   * The new value of for the measurement (optional)
   *
   * @format double
   */
  value?: number;
};

export type Pair = {
  /*
   * Ex: 101341.66666667
   *
   * @format double
   */
  causeMeasurement: number;
  /*
   * Ex: 101341.66666667
   *
   * @format double
   */
  causeMeasurementValue: number;
  /*
   * Ex: mg
   */
  causeVariableUnitAbbreviatedName: string;
  /*
   * Ex: 7.98
   *
   * @format double
   */
  effectMeasurement: number;
  /*
   * Ex: 7.98
   *
   * @format double
   */
  effectMeasurementValue: number;
  /*
   * Ex: %
   */
  effectVariableUnitAbbreviatedName: string;
  /*
   * Ex: 2015-08-06 15:49:02 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  eventAt?: string;
  /*
   * Ex: 1438876142
   */
  eventAtUnixTime?: number;
  /*
   * Ex: 2015-08-06 15:49:02 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  startTimeString?: string;
  /*
   * Ex: 1464937200
   */
  timestamp: number;
};

export type ParticipantInstruction = {
  /*
   * Ex: <a href="https://www.amazon.com/Fitbit-Charge-Heart-Fitness-Wristband/dp/B01K9S260E/ref=as_li_ss_tl?ie=UTF8&qid=1493518902&sr=8-3&keywords=fitbit&th=1&linkCode=ll1&tag=quant08-20&linkId=b357b0833de73b0c4e935fd7c13a079e">Obtain Fitbit</a> and use it to record your Sleep Duration. Once you have a <a href="https://www.amazon.com/Fitbit-Charge-Heart-Fitness-Wristband/dp/B01K9S260E/ref=as_li_ss_tl?ie=UTF8&qid=1493518902&sr=8-3&keywords=fitbit&th=1&linkCode=ll1&tag=quant08-20&linkId=b357b0833de73b0c4e935fd7c13a079e">Fitbit</a> account, <a href="https://app.curedao.org/#/app/import">connect your  Fitbit account at CureDAO</a> to automatically import and analyze your data.
   */
  instructionsForCauseVariable?: string;
  /*
   * Ex: <a href="https://curedao.org">Obtain CureDAO</a> and use it to record your Overall Mood. Once you have a <a href="https://curedao.org">CureDAO</a> account, <a href="https://app.curedao.org/#/app/import">connect your  CureDAO account at CureDAO</a> to automatically import and analyze your data.
   */
  instructionsForEffectVariable?: string;
};

export type PostMeasurementsDataResponse = {
  userVariables?: Variable[];
  /*
   * Can be used as body of help info popup
   */
  description?: string;
  /*
   * Can be used as title in help info popup
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type PostMeasurementsResponse = {
  data?: PostMeasurementsDataResponse;
  /*
   * Message
   */
  message?: string;
  /*
   * Can be used as body of help info popup
   */
  description?: string;
  /*
   * Can be used as title in help info popup
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status: string;
  /*
   * true or false
   */
  success: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type PostStudyPublishResponse = {
  /*
   * Can be used as body of help info popup
   */
  description?: string;
  /*
   * Can be used as title in help info popup
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type PostStudyCreateResponse = {
  study?: Study;
  /*
   * Can be used as body of help info popup
   */
  description?: string;
  /*
   * Can be used as title in help info popup
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type PostTrackingRemindersDataResponse = {
  trackingReminderNotifications?: TrackingReminderNotification[];
  trackingReminders?: TrackingReminder[];
  userVariables?: Variable[];
  /*
   * Can be used as body of help info popup
   */
  description?: string;
  /*
   * Can be used as title in help info popup
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type PostTrackingRemindersResponse = {
  data?: PostTrackingRemindersDataResponse;
  /*
   * Message
   */
  message?: string;
  /*
   * Can be used as body of help info popup
   */
  description?: string;
  /*
   * Can be used as title in help info popup
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status: string;
  /*
   * true or false
   */
  success: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type PostUserSettingsDataResponse = {
  /*
   * Ex: 1
   */
  purchaseId?: number;
  /*
   * Can be used as body of help info popup
   */
  description?: string;
  /*
   * Can be used as title in help info popup
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type PostUserSettingsResponse = {
  data?: PostUserSettingsDataResponse;
  /*
   * Message
   */
  message?: string;
  /*
   * Can be used as body of help info popup
   */
  description?: string;
  /*
   * Can be used as title in help info popup
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status: string;
  /*
   * true or false
   */
  success: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type ShareInvitationBody = {
  /*
   * Enter the email address of the friend, family member, or health-care provider that you would like to give access to your measurements
   */
  emailAddress: string;
  /*
   * Name of the individual that the user wishes to have access to their measurements
   */
  name?: string;
  /*
   * Ex: I would like to share my measurements with you!
   */
  emailSubject?: string;
  /*
   * Ex: I would like to share my data with you so you can help me identify find discover hidden causes of and new treatments for my illness.
   */
  emailBody?: string;
  /*
   * Space separated list of scopes to grant to the recipient (i.e. readmeasurements, writemeasurements, measurements:read
   */
  scopes?: string;
};

/**
 * A study analyzes the relationship between a predictor variable like gluten-intake and an outcome of interest such as overall mood.
 */
export type Study = {
  /*
   * Ex: population, cohort, or individual
   */
  type: string;
  /*
   * The user id of the principal investigator or subject if an individual studies
   *
   * @format int32
   */
  userId?: number;
  /*
   * ID of the cohort study which is necessary to allow participants to join
   */
  id?: string;
  causeVariable?: Variable;
  /*
   * Ex: Sleep Quality
   */
  causeVariableName?: string;
  studyCharts?: StudyCharts;
  effectVariable?: Variable;
  /*
   * Ex: Overall Mood
   */
  effectVariableName?: string;
  participantInstructions?: ParticipantInstruction;
  statistics?: Correlation;
  studyCard?: Card;
  studyHtml?: StudyHtml;
  studyImages?: StudyImages;
  studyLinks?: StudyLinks;
  studySharing?: StudySharing;
  studyText?: StudyText;
  studyVotes?: StudyVotes;
  /*
   * True if you are sharing your data with this study
   */
  joined?: boolean;
};

/**
 * An object with various chart properties each property contain and svg and Highcharts configuration
 */
export type StudyCharts = {
  populationTraitScatterPlot?: Chart;
  outcomeDistributionColumnChart?: Chart;
  predictorDistributionColumnChart?: Chart;
  correlationScatterPlot?: Chart;
  pairsOverTimeLineChart?: Chart;
};

export type StudyCreationBody = {
  /*
   * Name of predictor variable
   */
  causeVariableName: string;
  /*
   * Name of the outcome variable
   */
  effectVariableName: string;
  /*
   * Title of your study (optional)
   */
  studyTitle?: string;
  /*
   * Individual studies are based on data of a single user. Group studies are based on data from a specific group of individuals who have joined.  Global studies are based on aggregated and anonymously shared data from all users.
   */
  type: "individual" | "group" | "global";
};

export type StudyHtml = {
  /*
   * Embeddable chart html
   */
  chartHtml: string;
  /*
   * Play Store, App Store, Chrome Web Store
   */
  downloadButtonsHtml?: string;
  /*
   * Embeddable study including HTML head section charts.  Modifiable css classes are study-title, study-section-header, study-section-body
   */
  fullPageWithHead?: string;
  /*
   * Embeddable study text html including charts.  Modifiable css classes are study-title, study-section-header, study-section-body
   */
  fullStudyHtml: string;
  /*
   * Embeddable study html including charts and css styling
   */
  fullStudyHtmlWithCssStyles?: string;
  /*
   * Instructions for study participation
   */
  participantInstructionsHtml?: string;
  /*
   * Embeddable table with statistics
   */
  statisticsTableHtml?: string;
  /*
   * Text summary
   */
  studyAbstractHtml?: string;
  /*
   * Title, study image, abstract with CSS styling
   */
  studyHeaderHtml?: string;
  /*
   * PNG image
   */
  studyImageHtml?: string;
  /*
   * Facebook, Twitter, Google+
   */
  studyMetaHtml?: string;
  /*
   * Formatted study text sections
   */
  studyTextHtml?: string;
  socialSharingButtonHtml?: string;
  studySummaryBoxHtml?: string;
};

export type StudyImages = {
  /*
   * Ex: https://static.quantimo.do/img/variable_categories/sleeping_in_bed-96.png
   */
  causeVariableImageUrl?: string;
  /*
   * Ex: ion-ios-cloudy-night-outline
   */
  causeVariableIonIcon?: string;
  /*
   * Ex: https://static.quantimo.do/img/variable_categories/theatre_mask-96.png
   */
  effectVariableImageUrl?: string;
  /*
   * Ex: ion-happy-outline
   */
  effectVariableIonIcon?: string;
  /*
   * Ex: https://s3.amazonaws.com/curedao-docs/images/gauge-moderately-positive-relationship.png
   */
  gaugeImage: string;
  /*
   * Ex: https://s3.amazonaws.com/curedao-docs/images/gauge-moderately-positive-relationship-200-200.png
   */
  gaugeImageSquare: string;
  /*
   * Image with gauge and category images
   */
  gaugeSharingImageUrl?: string;
  /*
   * Ex: https://s3-us-west-1.amazonaws.com/qmimages/variable_categories_gauges_logo_background/gauge-moderately-positive-relationship_sleep_emotions_logo_background.png
   */
  imageUrl: string;
  /*
   * Image with robot and category images
   */
  robotSharingImageUrl?: string;
  /*
   * Avatar of the principal investigator
   */
  avatar?: string;
};

export type StudyJoinResponse = {
  study?: Study;
  trackingReminders?: TrackingReminder[];
  trackingReminderNotifications?: TrackingReminderNotification[];
  /*
   * Can be used as body of help info popup
   */
  description?: string;
  /*
   * Can be used as title in help info popup
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type StudyLinks = {
  /*
   * Share this link with potential study participants
   */
  studyJoinLink?: string;
  /*
   * Ex: mailto:?subject=N1%20Study%3A%20Sleep%20Quality%20Predicts%20Higher%20Overall%20Mood&body=Check%20out%20my%20study%20at%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fstudy%3FcauseVariableName%3DSleep%2520Quality%26effectVariableName%3DOverall%2520Mood%26userId%3D230%0A%0AHave%20a%20great%20day!
   */
  studyLinkEmail: string;
  /*
   * Ex: https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fstudy%3FcauseVariableName%3DSleep%2520Quality%26effectVariableName%3DOverall%2520Mood%26userId%3D230
   */
  studyLinkFacebook: string;
  /*
   * Ex: https://plus.google.com/share?url=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fstudy%3FcauseVariableName%3DSleep%2520Quality%26effectVariableName%3DOverall%2520Mood%26userId%3D230
   */
  studyLinkGoogle: string;
  /*
   * Ex: https://local.quantimo.do/api/v2/study?causeVariableName=Sleep%20Quality&effectVariableName=Overall%20Mood&userId=230
   */
  studyLinkStatic: string;
  /*
   * Ex: https://local.quantimo.do/ionic/Modo/www/index.html#/app/study?causeVariableName=Sleep%20Quality&effectVariableName=Overall%20Mood&userId=230
   */
  studyLinkDynamic: string;
  /*
   * Ex: https://twitter.com/home?status=Sleep%20Quality%20Predicts%20Higher%20Overall%20Mood%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fstudy%3FcauseVariableName%3DSleep%2520Quality%26effectVariableName%3DOverall%2520Mood%26userId%3D230%20%40curedao
   */
  studyLinkTwitter: string;
};

export type StudySharing = {
  /*
   * Would you like to make this study publicly visible?
   */
  shareUserMeasurements: boolean;
  /*
   * Ex: N1 Study: Sleep Quality Predicts Higher Overall Mood
   */
  sharingDescription: string;
  /*
   * Ex: N1 Study: Sleep Quality Predicts Higher Overall Mood
   */
  sharingTitle: string;
};

export type StudyText = {
  /*
   * Ex: Overall Mood is 3.55/5 (15% higher) on average after days with around 4.19/5 Sleep Quality
   */
  averageEffectFollowingHighCauseExplanation?: string;
  /*
   * Ex: Overall Mood is 2.65/5 (14% lower) on average after days with around 1.97/5 Sleep Quality
   */
  averageEffectFollowingLowCauseExplanation?: string;
  /*
   * Ex: Overall Mood, on average, 17% higher after around 4.14/5 Sleep Quality
   */
  valuePredictingHighOutcomeExplanation?: string;
  /*
   * Ex: Overall Mood, on average, 11% lower after around 3.03/5 Sleep Quality
   */
  valuePredictingLowOutcomeExplanation?: string;
  /*
   * Ex: It was assumed that 0 hours would pass before a change in Very Distracting Time would produce an observable change in Video Activities.  It was assumed that Very Distracting Time could produce an observable change in Video Activities for as much as 7 days after the stimulus event.
   */
  dataAnalysis?: string;
  /*
   * Ex: Very Distracting Time data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.<br>Video Activities data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.
   */
  dataSources?: string;
  /*
   * Ex: Very Distracting Time data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.<br>Video Activities data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.
   */
  dataSourcesParagraphForCause?: string;
  /*
   * Ex: Very Distracting Time data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.<br>Video Activities data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.
   */
  dataSourcesParagraphForEffect?: string;
  /*
   * Ex: Sleep Quality Predicts Higher Overall Mood
   */
  lastCauseDailyValueSentenceExtended?: string;
  /*
   * Ex: Sleep Quality Predicts Higher Overall Mood
   */
  lastCauseAndOptimalValueSentence?: string;
  /*
   * Ex: Sleep Quality Predicts Higher Overall Mood
   */
  lastCauseDailyValueSentence?: string;
  /*
   * Ex: Sleep Quality Predicts Higher Overall Mood
   */
  optimalDailyValueSentence?: string;
  /*
   * Instructions for study participation
   */
  participantInstructions?: string;
  /*
   * Ex: Sleep Quality Predicts Higher Overall Mood
   */
  predictorExplanation?: string;
  /*
   * Ex: Using a two-tailed t-test with alpha = 0.05, it was determined that the change in Video Activities is statistically significant at 95% confidence interval.
   */
  significanceExplanation?: string;
  /*
   * Ex: Aggregated data from 21 suggests with a low degree of confidence (p=0.097) that Very Distracting Time has a moderately positive predictive relationship (R=0.354) with Video Activities  (Activity).  The highest quartile of Video Activities measurements were observed following an average 2.03h Very Distracting Timeper day.  The lowest quartile of Video Activities  measurements were observed following an average 1.04h Very Distracting Timeper day.
   */
  studyAbstract: string;
  /*
   * Ex: This study is based on data donated by  21 CureDAO users. Thus, the study design is equivalent to the aggregation of 21 separate n=1 observational natural experiments.
   */
  studyDesign: string;
  /*
   * Ex: As with any human experiment, it was impossible to control for all potentially confounding variables.
   *             Correlation does not necessarily imply correlation.  We can never know for sure if one factor is definitely the cause of an outcome.
   *             However, lack of correlation definitely implies the lack of a causal relationship.  Hence, we can with great
   *             confidence rule out non-existent relationships. For instance, if we discover no relationship between mood
   *             and an antidepressant this information is just as or even more valuable than the discovery that there is a relationship.
   *             <br>
   *             <br>
   *             We can also take advantage of several characteristics of time series data from many subjects  to infer the likelihood of a causal relationship if we do find a correlational relationship.
   *             The criteria for causation are a group of minimal conditions necessary to provide adequate evidence of a causal relationship between an incidence and a possible consequence.
   *             The list of the criteria is as follows:
   *             <br>
   *             1. Strength (effect size): A small association does not mean that there is not a causal effect, though the larger the association, the more likely that it is causal.
   *             <br>
   *             2. Consistency (reproducibility): Consistent findings observed by different persons in different places with different samples strengthens the likelihood of an effect.
   *             <br>
   *             3. Specificity: Causation is likely if a very specific population at a specific site and disease with no other likely explanation. The more specific an association between a factor and an effect is, the bigger the probability of a causal relationship.
   *             <br>
   *             4. Temporality: The effect has to occur after the cause (and if there is an expected delay between the cause and expected effect, then the effect must occur after that delay).
   *             <br>
   *             5. Biological gradient: Greater exposure should generally lead to greater incidence of the effect. However, in some cases, the mere presence of the factor can trigger the effect. In other cases, an inverse proportion is observed: greater exposure leads to lower incidence.
   *             <br>
   *             6. Plausibility: A plausible mechanism between cause and effect is helpful.
   *             <br>
   *             7. Coherence: Coherence between epidemiological and laboratory findings increases the likelihood of an effect.
   *             <br>
   *             8. Experiment: "Occasionally it is possible to appeal to experimental evidence".
   *             <br>
   *             9. Analogy: The effect of similar factors may be considered.
   *             <br>
   *             <br>
   *              The confidence in a causal relationship is bolstered by the fact that time-precedence was taken into account in all calculations. Furthermore, in accordance with the law of large numbers (LLN), the predictive power and accuracy of these results will continually grow over time.  146 paired data points were used in this analysis.   Assuming that the relationship is merely coincidental, as the participant independently modifies their Very Distracting Time values, the observed strength of the relationship will decline until it is below the threshold of significance.  To it another way, in the case that we do find a spurious correlation, suggesting that banana intake improves mood for instance,
   *             one will likely increase their banana intake.  Due to the fact that this correlation is spurious, it is unlikely
   *             that you will see a continued and persistent corresponding increase in mood.  So over time, the spurious correlation will
   *             naturally dissipate.Furthermore, it will be very enlightening to aggregate this data with the data from other participants  with similar genetic, diseasomic, environmentomic, and demographic profiles.
   */
  studyLimitations: string;
  /*
   * Ex: The objective of this study is to determine the nature of the relationship (if any) between the Very Distracting Time and the Video Activities. Additionally, we attempt to determine the Very Distracting Time values most likely to produce optimal Video Activities values.
   */
  studyObjective: string;
  /*
   * Ex: This analysis suggests that higher Very Distracting Time generally predicts negative Video Activities (p = 0.097). Video Activities is, on average, 36%  higher after around 2.03 Very Distracting Time.  After an onset delay of 168 hours, Video Activities is, on average, 16%  lower than its average over the 168 hours following around 1.04 Very Distracting Time.  146 data points were used in this analysis.  The value for Very Distracting Time changed 2984 times, effectively running 1492 separate natural experiments. The top quartile outcome values are preceded by an average 2.03 h of Very Distracting Time.  The bottom quartile outcome values are preceded by an average 1.04 h of Very Distracting Time.  Forward Pearson Correlation Coefficient was 0.354 (p=0.097, 95% CI -0.437 to 1.144 onset delay = 0 hours, duration of action = 168 hours) .  The Reverse Pearson Correlation Coefficient was 0.208 (P=0.097, 95% CI -0.583 to 0.998, onset delay = -0 hours, duration of action = -168 hours). When the Very Distracting Time value is closer to 2.03 h than 1.04 h, the Video Activities value which follows is, on average, 36% percent higher than its typical value.  When the Very Distracting Time value is closer to 1.04 h than 2.03 h, the Video Activities value which follows is 0% lower than its typical value.  Video Activities is 5 h (67% higher) on average after days with around 5 h Very Distracting Time
   */
  studyResults: string;
  /*
   * Ex: N1 Study: Very Distracting Time Predicts Negative Video Activities
   */
  studyTitle: string;
  /*
   * Help us determine if Remeron affects Overall Mood!
   */
  studyInvitation?: string;
  /*
   * Does Remeron affect Overall Mood?
   */
  studyQuestion?: string;
  /*
   * In order to reduce suffering through the advancement of human knowledge...
   */
  studyBackground?: string;
};

export type StudyVotes = {
  /*
   * Average of all user votes with 1 representing an up-vote and 0 representing a down-vote. Ex: 0.9855
   */
  averageVote: number;
  /*
   * 1 if the current user has up-voted the study and 0 if they down-voted it. Null means no vote. Ex: 1 or 0 or null
   */
  userVote: number;
};

export type TrackingReminder = {
  actionArray?: TrackingReminderNotificationAction[];
  availableUnits?: Unit[];
  /*
   * Link to study comparing variable with strongest relationship for user or population
   */
  bestStudyLink?: string;
  bestStudyCard?: Card;
  /*
   * Link to study comparing variable with strongest relationship for user
   */
  bestUserStudyLink?: string;
  bestUserStudyCard?: Card;
  /*
   * Link to study comparing variable with strongest relationship for population
   */
  bestPopulationStudyLink?: string;
  bestPopulationStudyCard?: Card;
  /*
   * Description of relationship with variable with strongest relationship for user or population
   */
  optimalValueMessage?: string;
  /*
   * Description of relationship with variable with strongest relationship for population
   */
  commonOptimalValueMessage?: string;
  /*
   * Description of relationship with variable with strongest relationship for user
   */
  userOptimalValueMessage?: string;
  card?: Card;
  /*
   * Your CureDAO client id can be obtained by creating an app at https://builder.curedao.org
   */
  clientId?: string;
  /*
   * The way multiple measurements are aggregated over time
   */
  combinationOperation?: "MEAN" | "SUM";
  /*
   * Ex: 2016-05-18 02:24:08 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  createdAt?: string;
  /*
   * Ex: Trader Joe's Bedtime Tea
   */
  displayName?: string;
  /*
   * Ex: /5
   */
  unitAbbreviatedName: string;
  /*
   * Ex: 5
   */
  unitCategoryId?: number;
  /*
   * Ex: Rating
   */
  unitCategoryName?: string;
  /*
   * Ex: 10
   */
  unitId?: number;
  /*
   * Ex: 1 to 5 Rating
   */
  unitName?: string;
  /*
   * Default value to use for the measurement when tracking. Unit: User-specified or common.
   *
   * @format float
   */
  defaultValue?: number;
  /*
   * If a tracking reminder is enabled, tracking reminder notifications will be generated for this variable.
   */
  enabled?: boolean;
  /*
   * True if the reminders should be delivered via email
   */
  email?: boolean;
  /*
   * Ex: reminderStartTimeLocal is less than $user->earliestReminderTime or greater than  $user->latestReminderTime
   */
  errorMessage?: string;
  /*
   * Ex: 0. Unit: User-specified or common.
   */
  fillingValue?: number;
  /*
   * Ex: 02:45:20 in UTC timezone
   */
  firstDailyReminderTime?: string;
  /*
   * Ex: Daily
   */
  frequencyTextDescription?: string;
  /*
   * Ex: Daily at 09:45 PM
   */
  frequencyTextDescriptionWithTime?: string;
  /*
   * id
   *
   * @format int32
   */
  id?: number;
  /*
   * Ex: saddestFaceIsFive
   */
  inputType?: string;
  /*
   * Ex: I am an instruction!
   */
  instructions?: string;
  /*
   * Ex: ion-sad-outline
   */
  ionIcon?: string;
  /*
   * UTC ISO 8601 YYYY-MM-DDThh:mm:ss timestamp for the last time a measurement was received for this user and variable
   */
  lastTracked?: string;
  /*
   * Ex: 2
   *
   * @format double
   */
  lastValue?: number;
  /*
   * UTC ISO 8601 YYYY-MM-DDThh:mm:ss  timestamp for the reminder time of the latest tracking reminder notification that has been pre-emptively generated in the database
   */
  latestTrackingReminderNotificationReminderTime?: string;
  localDailyReminderNotificationTimes?: string[];
  localDailyReminderNotificationTimesForAllReminders?: string[];
  /*
   * Ex: 1
   */
  manualTracking?: boolean;
  /*
   * Ex: 5. Unit: User-specified or common.
   *
   * @format double
   */
  maximumAllowedValue?: number;
  /*
   * Ex: 1. Unit: User-specified or common.
   *
   * @format double
   */
  minimumAllowedValue?: number;
  /*
   * Ex: 1501555520
   */
  nextReminderTimeEpochSeconds?: number;
  /*
   * True if the reminders should appear in the notification bar
   */
  notificationBar?: boolean;
  /*
   * Ex: 445
   */
  numberOfRawMeasurements?: number;
  /*
   * Ex: 1
   */
  numberOfUniqueValues?: number;
  /*
   * Indicates whether or not the variable is usually an outcome of interest such as a symptom or emotion
   */
  outcome?: boolean;
  /*
   * Ex: img/variable_categories/symptoms.png
   */
  pngPath?: string;
  /*
   * Ex: https://app.curedao.org/img/variable_categories/symptoms.png
   */
  pngUrl?: string;
  /*
   * Link to associated product for purchase
   */
  productUrl?: string;
  /*
   * True if the reminders should appear as a popup notification
   */
  popUp?: boolean;
  /*
   * Ex: How is your overall mood?
   */
  question?: string;
  /*
   * Ex: How is your overall mood on a scale of 1 to 5??
   */
  longQuestion?: string;
  /*
   * Latest time of day at which reminders should appear in UTC HH:MM:SS format
   */
  reminderEndTime?: string;
  /*
   * Number of seconds between one reminder and the next
   *
   * @format int32
   */
  reminderFrequency: number;
  /*
   * String identifier for the sound to accompany the reminder
   */
  reminderSound?: string;
  /*
   * Ex: 1469760320
   */
  reminderStartEpochSeconds?: number;
  /*
   * Earliest time of day at which reminders should appear in UTC HH:MM:SS format
   */
  reminderStartTime?: string;
  /*
   * Ex: 21:45:20
   *
   * @format string
   */
  reminderStartTimeLocal?: string;
  /*
   * Ex: 09:45 PM
   */
  reminderStartTimeLocalHumanFormatted?: string;
  /*
   * Ex: true
   */
  repeating?: boolean;
  /*
   * Ex: 01:00:00
   */
  secondDailyReminderTime?: string;
  /*
   * Ex: 1. Unit: User-specified or common.
   *
   * @format double
   */
  secondToLastValue?: number;
  /*
   * True if the reminders should be delivered via SMS
   */
  sms?: boolean;
  /*
   * Earliest date on which the user should be reminded to track in YYYY-MM-DD format
   *
   * @format string
   */
  startTrackingDate?: string;
  /*
   * Latest date on which the user should be reminded to track in YYYY-MM-DD format
   *
   * @format string
   */
  stopTrackingDate?: string;
  /*
   * Ex: https://app.curedao.org/img/variable_categories/symptoms.svg
   */
  svgUrl?: string;
  /*
   * Ex: 20:00:00
   */
  thirdDailyReminderTime?: string;
  /*
   * Ex: 3
   *
   * @format double
   */
  thirdToLastValue?: number;
  /*
   * Ex: 11841
   */
  trackingReminderId?: number;
  /*
   * Ex: Not Found
   */
  trackingReminderImageUrl?: string;
  /*
   * UPC or other barcode scan result
   */
  upc?: string;
  /*
   * When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local.
   */
  updatedAt?: string;
  /*
   * ID of User
   *
   * @format int32
   */
  userId?: number;
  /*
   * Ex: /5
   */
  userVariableUnitAbbreviatedName?: string;
  /*
   * Ex: 5
   */
  userVariableUnitCategoryId?: number;
  /*
   * Ex: Rating
   */
  userVariableUnitCategoryName?: string;
  /*
   * Ex: 10
   */
  userVariableUnitId?: number;
  /*
   * Ex: 1 to 5 Rating
   */
  userVariableUnitName?: string;
  /*
   * Ex: 10
   */
  userVariableVariableCategoryId?: number;
  /*
   * Ex: Symptoms
   */
  userVariableVariableCategoryName?: string;
  /*
   * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables.
   */
  valence?: string;
  /*
   * Ex: Rate daily
   */
  valueAndFrequencyTextDescription?: string;
  /*
   * Ex: Rate daily at 09:45 PM
   */
  valueAndFrequencyTextDescriptionWithTime?: string;
  /*
   * Ex: 10
   */
  variableCategoryId?: number;
  /*
   * Ex: https://static.quantimo.do/img/variable_categories/sad-96.png
   */
  variableCategoryImageUrl?: string;
  /*
   * Ex: Emotions, Treatments, Symptoms...
   */
  variableCategoryName:
    | "Activity"
    | "Books"
    | "Causes of Illness"
    | "Cognitive Performance"
    | "Conditions"
    | "Emotions"
    | "Environment"
    | "Foods"
    | "Goals"
    | "Locations"
    | "Miscellaneous"
    | "Movies and TV"
    | "Music"
    | "Nutrients"
    | "Payments"
    | "Physical Activities"
    | "Physique"
    | "Sleep"
    | "Social Interactions"
    | "Software"
    | "Symptoms"
    | "Treatments"
    | "Vital Signs";
  /*
   * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables.
   */
  variableDescription?: string;
  /*
   * Id for the variable to be tracked
   *
   * @format int32
   */
  variableId?: number;
  /*
   * Name of the variable to be used when sending measurements
   */
  variableName: string;
};

export type TrackingReminderNotification = {
  actionArray: TrackingReminderNotificationAction[];
  availableUnits: Unit[];
  /*
   * Link to study comparing variable with strongest relationship for user or population
   */
  bestStudyLink?: string;
  bestStudyCard?: Card;
  /*
   * Link to study comparing variable with strongest relationship for user
   */
  bestUserStudyLink?: string;
  bestUserStudyCard?: Card;
  /*
   * Link to study comparing variable with strongest relationship for population
   */
  bestPopulationStudyLink?: string;
  bestPopulationStudyCard?: Card;
  /*
   * Description of relationship with variable with strongest relationship for user or population
   */
  optimalValueMessage?: string;
  /*
   * Description of relationship with variable with strongest relationship for population
   */
  commonOptimalValueMessage?: string;
  /*
   * Description of relationship with variable with strongest relationship for user
   */
  userOptimalValueMessage?: string;
  card?: Card;
  /*
   * Your CureDAO client id can be obtained by creating an app at https://builder.curedao.org
   */
  clientId?: string;
  /*
   * The way multiple measurements are aggregated over time
   */
  combinationOperation?: "MEAN" | "SUM";
  /*
   * Ex: 2017-07-29 20:49:54 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  createdAt?: string;
  /*
   * Ex: Trader Joe's Bedtime Tea
   */
  displayName?: string;
  /*
   * Is the user specified default value or falls back to the last value in user unit. Good for initializing input fields. Unit: User-specified or common.
   *
   * @format double
   */
  modifiedValue?: number;
  /*
   * Ex: /5
   */
  unitAbbreviatedName?: string;
  /*
   * Ex: 5
   */
  unitCategoryId?: number;
  /*
   * Ex: Rating
   */
  unitCategoryName?: string;
  /*
   * Ex: 10
   */
  unitId?: number;
  /*
   * Ex: 1 to 5 Rating
   */
  unitName?: string;
  /*
   * Default value to use for the measurement when tracking
   *
   * @format float
   */
  defaultValue?: number;
  /*
   * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables.
   */
  description?: string;
  /*
   * True if the reminders should be delivered via email
   */
  email?: boolean;
  /*
   * Ex: 0
   */
  fillingValue: number;
  /*
   * Ex: ion-sad-outline
   */
  iconIcon?: string;
  /*
   * id for the specific PENDING tracking remidner
   *
   * @format int32
   */
  id: number;
  /*
   * Ex: https://rximage.nlm.nih.gov/image/images/gallery/original/55111-0129-60_RXNAVIMAGE10_B051D81E.jpg
   */
  imageUrl?: string;
  /*
   * Ex: happiestFaceIsFive
   */
  inputType?: string;
  /*
   * Ex: ion-happy-outline
   */
  ionIcon?: string;
  /*
   * Ex: 3
   *
   * @format double
   */
  lastValue?: number;
  /*
   * True if this variable is normally tracked via manual user input rather than automatic imports
   */
  manualTracking?: boolean;
  /*
   * Ex: 5
   */
  maximumAllowedValue?: number;
  /*
   * Ex: 1
   */
  minimumAllowedValue?: number;
  /*
   * Ex: 3
   *
   * @format double
   */
  mostCommonValue?: number;
  /*
   * True if the reminders should appear in the notification bar
   */
  notificationBar?: boolean;
  /*
   * Ex: UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  notifiedAt?: string;
  /*
   * Ex: 5
   */
  numberOfUniqueValues?: number;
  /*
   * Indicates whether or not the variable is usually an outcome of interest such as a symptom or emotion
   */
  outcome?: boolean;
  /*
   * Ex: img/variable_categories/emotions.png
   */
  pngPath?: string;
  /*
   * Ex: https://app.curedao.org/img/variable_categories/emotions.png
   */
  pngUrl?: string;
  /*
   * True if the reminders should appear as a popup notification
   */
  popUp?: boolean;
  /*
   * Link to associated product for purchase
   */
  productUrl?: string;
  /*
   * Ex: How is your overall mood?
   */
  question?: string;
  /*
   * Ex: How is your overall mood on a scale of 1 to 5??
   */
  longQuestion?: string;
  /*
   * Ex: 01-01-2018
   */
  reminderEndTime?: string;
  /*
   * How often user should be reminded in seconds. Ex: 86400
   */
  reminderFrequency?: number;
  /*
   * String identifier for the sound to accompany the reminder
   */
  reminderSound?: string;
  /*
   * Earliest time of day at which reminders should appear in UTC HH:MM:SS format
   */
  reminderStartTime?: string;
  /*
   * UTC ISO 8601 YYYY-MM-DDThh:mm:ss timestamp for the specific time the variable should be tracked in UTC.  This will be used for the measurement startTime if the track endpoint is used.
   */
  reminderTime?: string;
  /*
   * Ex: 4
   *
   * @format double
   */
  secondMostCommonValue?: number;
  /*
   * Ex: 1
   *
   * @format double
   */
  secondToLastValue?: number;
  /*
   * True if the reminders should be delivered via SMS
   */
  sms?: boolean;
  /*
   * Ex: https://app.curedao.org/img/variable_categories/emotions.svg
   */
  svgUrl?: string;
  /*
   * Ex: 2
   *
   * @format double
   */
  thirdMostCommonValue?: number;
  /*
   * Ex: 2
   *
   * @format double
   */
  thirdToLastValue?: number;
  /*
   * Ex: Rate Overall Mood
   */
  title?: string;
  /*
   * Ex: 3
   *
   * @format double
   */
  total?: number;
  trackAllActions: TrackingReminderNotificationTrackAllAction[];
  /*
   * id for the repeating tracking remidner
   *
   * @format int32
   */
  trackingReminderId?: number;
  /*
   * Ex: https://rximage.nlm.nih.gov/image/images/gallery/original/55111-0129-60_RXNAVIMAGE10_B051D81E.jpg
   */
  trackingReminderImageUrl?: string;
  /*
   * Ex: 5072482
   */
  trackingReminderNotificationId?: number;
  /*
   * UTC ISO 8601 YYYY-MM-DDThh:mm:ss timestamp for the specific time the variable should be tracked in UTC.  This will be used for the measurement startTime if the track endpoint is used.
   */
  trackingReminderNotificationTime?: string;
  /*
   * Ex: 1501534124
   */
  trackingReminderNotificationTimeEpoch?: number;
  /*
   * Ex: 15:48:44
   */
  trackingReminderNotificationTimeLocal?: string;
  /*
   * Ex: 8PM Sun, May 1
   */
  trackingReminderNotificationTimeLocalHumanString?: string;
  /*
   * When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local.
   */
  updatedAt?: string;
  /*
   * ID of User
   *
   * @format int32
   */
  userId?: number;
  /*
   * Ex: /5
   */
  userVariableUnitAbbreviatedName?: string;
  /*
   * Ex: 5
   */
  userVariableUnitCategoryId?: number;
  /*
   * Ex: Rating
   */
  userVariableUnitCategoryName?: string;
  /*
   * Ex: 10
   */
  userVariableUnitId?: number;
  /*
   * Ex: 1 to 5 Rating
   */
  userVariableUnitName?: string;
  /*
   * Ex: 1
   */
  userVariableVariableCategoryId?: number;
  /*
   * Ex: Emotions
   */
  userVariableVariableCategoryName?: string;
  /*
   * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables.
   */
  valence?: string;
  /*
   * Ex: 1
   */
  variableCategoryId?: number;
  /*
   * Ex: https://static.quantimo.do/img/variable_categories/theatre_mask-96.png
   */
  variableCategoryImageUrl?: string;
  /*
   * Ex: Emotions, Treatments, Symptoms...
   */
  variableCategoryName?:
    | "Activity"
    | "Books"
    | "Causes of Illness"
    | "Cognitive Performance"
    | "Conditions"
    | "Emotions"
    | "Environment"
    | "Foods"
    | "Goals"
    | "Locations"
    | "Miscellaneous"
    | "Movies and TV"
    | "Music"
    | "Nutrients"
    | "Payments"
    | "Physical Activities"
    | "Physique"
    | "Sleep"
    | "Social Interactions"
    | "Software"
    | "Symptoms"
    | "Treatments"
    | "Vital Signs";
  /*
   * Id for the variable to be tracked
   *
   * @format int32
   */
  variableId?: number;
  /*
   * Ex: https://image.png
   */
  variableImageUrl?: string;
  /*
   * Name of the variable to be used when sending measurements
   */
  variableName?: string;
};

export type TrackingReminderNotificationAction = {
  /*
   * Ex: track
   */
  action: string;
  /*
   * Ex: trackThreeRatingAction
   */
  callback: string;
  /*
   * Ex: 3
   */
  modifiedValue: number;
  /*
   * Ex: 3/5
   */
  title: string;
  /*
   * Ex: Rate 3/5
   */
  longTitle?: string;
  /*
   * Ex: 3
   */
  shortTitle?: string;
};

export type TrackingReminderNotificationPost = {
  /*
   * track records a measurement for the notification.  snooze changes the notification to 1 hour from now. skip deletes the notification.
   */
  action: "skip" | "snooze" | "track";
  /*
   * Id of the TrackingReminderNotification
   */
  id: number;
  /*
   * Optional value to be recorded instead of the tracking reminder default value
   */
  modifiedValue?: number;
};

export type TrackingReminderNotificationTrackAllAction = {
  /*
   * Ex: trackAll
   */
  action: string;
  /*
   * Ex: trackThreeRatingAction
   */
  callback: string;
  /*
   * Ex: 3
   */
  modifiedValue: number;
  /*
   * Ex: Rate 3/5 for all
   */
  title: string;
};

export type Unit = {
  /*
   * Unit abbreviation
   */
  abbreviatedName: string;
  /*
   * Ex: 1
   */
  advanced?: number;
  /*
   * Unit category
   */
  category:
    | "Distance"
    | "Duration"
    | "Energy"
    | "Frequency"
    | "Miscellany"
    | "Pressure"
    | "Proportion"
    | "Rating"
    | "Temperature"
    | "Volume"
    | "Weight"
    | "Count";
  /*
   * Ex: 6
   */
  categoryId?: number;
  /*
   * Ex: Miscellany
   */
  categoryName?: string;
  /*
   * Conversion steps list
   */
  conversionSteps: ConversionStep[];
  /*
   * Ex: 29
   */
  id?: number;
  /*
   * Ex: 0
   */
  manualTracking?: number;
  /*
   * The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.
   *
   * @format double
   */
  maximumAllowedValue?: number;
  /*
   * Ex: 4
   */
  maximumValue: number;
  /*
   * The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.
   *
   * @format double
   */
  minimumAllowedValue?: number;
  /*
   * Ex: 0
   */
  minimumValue?: number;
  /*
   * Unit name
   */
  name: string;
  unitCategory: UnitCategory;
};

export type UnitCategory = {
  /*
   * id
   */
  id?: number;
  /*
   * Category name
   */
  name: string;
  /*
   * Base unit for in which measurements are to be converted to and stored
   */
  standardUnitAbbreviatedName?: string;
};

export type User = {
  /*
   * User access token
   */
  accessToken: string;
  /*
   * Ex: 2018-08-08 02:41:19
   */
  accessTokenExpires?: string;
  /*
   * Ex: 1533696079000
   */
  accessTokenExpiresAtMilliseconds?: number;
  /*
   * Is user administrator
   */
  administrator: boolean;
  authorizedClients?: AuthorizedClients;
  /*
   * Ex: https://lh6.googleusercontent.com/-BHr4hyUWqZU/AAAAAAAAAAI/AAAAAAAIG28/2Lv0en738II/photo.jpg?sz=50
   */
  avatar?: string;
  /*
   * Ex: https://lh6.googleusercontent.com/-BHr4hyUWqZU/AAAAAAAAAAI/AAAAAAAIG28/2Lv0en738II/photo.jpg?sz=50
   */
  avatarImage?: string;
  /*
   * Ex: a:1:{s:13:"administrator";b:1;}
   */
  capabilities?: string;
  card?: Card;
  /*
   * Ex: curedao
   */
  clientId?: string;
  /*
   * Ex: 118444693184829555362
   */
  clientUserId?: string;
  /*
   * Ex: 1
   */
  combineNotifications?: boolean;
  /*
   * When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format
   */
  createdAt?: string;
  /*
   * Your bio will be displayed on your published studies
   */
  description?: string;
  /*
   * User display name
   */
  displayName: string;
  /*
   * Earliest time user should get notifications. Ex: 05:00:00
   */
  earliestReminderTime?: string;
  /*
   * User email
   */
  email: string;
  /*
   * Ex: Mike
   */
  firstName?: string;
  /*
   * Ex: false
   */
  getPreviewBuilds?: boolean;
  /*
   * Ex: false
   */
  hasAndroidApp?: boolean;
  /*
   * Ex: false
   */
  hasChromeExtension?: boolean;
  /*
   * Ex: false
   */
  hasIosApp?: boolean;
  /*
   * User id
   */
  id: number;
  /*
   * Ex: Date the user last logged in
   */
  lastActive?: string;
  /*
   * Ex: 2009
   */
  lastFour?: string;
  /*
   * Ex: Sinn
   */
  lastName?: string;
  /*
   * Ex: 1
   */
  lastSmsTrackingReminderNotificationId?: string;
  /*
   * Latest time user should get notifications. Ex: 23:00:00
   */
  latestReminderTime?: string;
  /*
   * User login name
   */
  loginName: string;
  /*
   * Ex: PASSWORD
   */
  password?: string;
  /*
   * Ex: 618-391-0002
   */
  phoneNumber?: string;
  /*
   * Ex: 1234
   */
  phoneVerificationCode?: string;
  /*
   * A good primary outcome variable is something that you want to improve and that changes inexplicably. For instance, if you have anxiety, back pain or arthritis which is worse on some days than others, these would be good candidates for primary outcome variables.  Recording their severity and potential factors will help you identify hidden factors exacerbating or improving them.
   */
  primaryOutcomeVariableId?: number;
  /*
   * A good primary outcome variable is something that you want to improve and that changes inexplicably. For instance, if you have anxiety, back pain or arthritis which is worse on some days than others, these would be good candidates for primary outcome variables.  Recording their severity and potential factors will help you identify hidden factors exacerbating or improving them.
   */
  primaryOutcomeVariableName?: string;
  /*
   * Ex: 1
   */
  pushNotificationsEnabled?: boolean;
  /*
   * See https://oauth.net/2/grant-types/refresh-token/
   */
  refreshToken?: string;
  /*
   * Ex: ["admin"]
   */
  roles?: string;
  /*
   * Ex: 1
   */
  sendPredictorEmails?: boolean;
  /*
   * Ex: 1
   */
  sendReminderNotificationEmails?: boolean;
  /*
   * Share all studies, charts, and measurement data with all other users
   */
  shareAllData?: boolean;
  /*
   * Ex: false
   */
  smsNotificationsEnabled?: boolean;
  /*
   * Ex: 1
   */
  stripeActive?: boolean;
  /*
   * Ex: cus_A8CEmcvl8jwLhV
   */
  stripeId?: string;
  /*
   * Ex: monthly7
   */
  stripePlan?: string;
  /*
   * Ex: sub_ANTx3nOE7nzjQf
   */
  stripeSubscription?: string;
  /*
   * UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  subscriptionEndsAt?: string;
  /*
   * Ex: google
   */
  subscriptionProvider?: string;
  /*
   * Ex: 300
   */
  timeZoneOffset?: number;
  /*
   * Ex: 1
   */
  trackLocation?: boolean;
  /*
   * When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format
   */
  updatedAt?: string;
  /*
   * Ex: 2013-12-03 15:25:13 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  userRegistered?: string;
  /*
   * Ex: https://plus.google.com/+MikeSinn
   */
  userUrl?: string;
};

export type UsersResponse = {
  users: User[];
  /*
   * Users who granted access to their data
   */
  description?: string;
  /*
   * Users who granted access to their data
   */
  summary?: string;
  /*
   * Array of error objects with message property
   */
  errors?: ErrorResponse[];
  /*
   * ex. OK or ERROR
   */
  status?: string;
  /*
   * true or false
   */
  success?: boolean;
  /*
   * Response code such as 200
   */
  code?: number;
  image?: Image;
  /*
   * Square icon png url
   */
  avatar?: string;
  /*
   * Ex: ion-ios-person
   */
  ionIcon?: string;
  /*
   * Users who granted access to their data
   */
  html?: string;
  /*
   * A super neat url you might want to share with your users!
   */
  link?: string;
  card?: Card;
};

export type UserTag = {
  /*
   * Number by which we multiply the tagged variable value to obtain the tag variable (ingredient) value
   */
  conversionFactor: number;
  /*
   * This is the id of the variable being tagged with an ingredient or something.
   */
  taggedVariableId: number;
  /*
   * This is the id of the ingredient variable whose value is determined based on the value of the tagged variable.
   */
  tagVariableId: number;
};

export type Variable = {
  actionArray?: TrackingReminderNotificationAction[];
  /*
   * User-Defined Variable Setting:  Alternative display name
   */
  alias?: string;
  availableUnits?: Unit[];
  /*
   * Link to study comparing variable with strongest relationship for user or population
   */
  bestStudyLink?: string;
  bestStudyCard?: Card;
  /*
   * Link to study comparing variable with strongest relationship for user
   */
  bestUserStudyLink?: string;
  bestUserStudyCard?: Card;
  /*
   * Link to study comparing variable with strongest relationship for population
   */
  bestPopulationStudyLink?: string;
  bestPopulationStudyCard?: Card;
  /*
   * Description of relationship with variable with strongest relationship for user or population
   */
  optimalValueMessage?: string;
  /*
   * Description of relationship with variable with strongest relationship for population
   */
  commonOptimalValueMessage?: string;
  /*
   * Description of relationship with variable with strongest relationship for user
   */
  userOptimalValueMessage?: string;
  card?: Card;
  /*
   * User-Defined Variable Setting: True indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user
   */
  causeOnly?: boolean;
  charts?: VariableCharts;
  /*
   * Ex: https://local.quantimo.do/ionic/Modo/www/#/app/charts/Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29?variableName=Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29&userId=230&pngUrl=https%3A%2F%2Fapp.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Ftreatments.png
   */
  chartsLinkDynamic?: string;
  /*
   * Ex: mailto:?subject=Check%20out%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20data%21&body=See%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20history%20at%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png%0A%0AHave%20a%20great%20day!
   */
  chartsLinkEmail?: string;
  /*
   * Ex: https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png
   */
  chartsLinkFacebook?: string;
  /*
   * Ex: https://plus.google.com/share?url=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png
   */
  chartsLinkGoogle?: string;
  /*
   * Ex: https://local.quantimo.do/api/v2/charts?variableName=Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29&userId=230&pngUrl=https%3A%2F%2Fapp.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Ftreatments.png
   */
  chartsLinkStatic?: string;
  /*
   * Ex: https://twitter.com/home?status=Check%20out%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20data%21%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png%20%40curedao
   */
  chartsLinkTwitter?: string;
  /*
   * Commonly defined for all users. An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.
   */
  childCommonTagVariables?: Variable[];
  /*
   * User-Defined Variable Setting: An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.
   */
  childUserTagVariables?: Variable[];
  /*
   * Your CureDAO client id can be obtained by creating an app at https://builder.curedao.org
   */
  clientId?: string;
  /*
   * User-Defined Variable Setting: How to aggregate measurements over time. SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
   */
  combinationOperation?: "MEAN" | "SUM";
  /*
   * Ex: Anxiety / Nervousness
   */
  commonAlias?: string;
  commonTaggedVariables?: Variable[];
  commonTagVariables?: Variable[];
  /*
   * When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format
   */
  createdAt?: string;
  /*
   * Comma-separated list of source names to limit variables to those sources
   */
  dataSourceNames?: string;
  /*
   * These are sources of measurements for this variable
   */
  dataSources?: DataSource[];
  /*
   * User-Defined Variable Setting: Ex: Summary to be used in studies.
   */
  description?: string;
  /*
   * Ex: Trader Joe's Bedtime Tea
   */
  displayName?: string;
  /*
   * The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay. Unit: Seconds
   *
   * @format int32
   */
  durationOfAction?: number;
  /*
   * User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Hours
   *
   * @format float
   */
  durationOfActionInHours?: number;
  /*
   * Earliest filling time
   *
   * @format int32
   */
  earliestFillingTime?: number;
  /*
   * Earliest measurement time
   *
   * @format int32
   */
  earliestMeasurementTime?: number;
  /*
   * Earliest source time
   *
   * @format int32
   */
  earliestSourceTime?: number;
  /*
   * Error message from last analysis
   */
  errorMessage?: string;
  /*
   * User-Defined Variable Setting: Latest measurement time to be used in analysis. Format: UTC ISO 8601 YYYY-MM-DDThh:mm:ss.
   */
  experimentEndTime?: string;
  /*
   * User-Defined Variable Setting: Earliest measurement time to be used in analysis. Format: UTC ISO 8601 YYYY-MM-DDThh:mm:ss.
   */
  experimentStartTime?: string;
  /*
   * User-Defined Variable Setting: When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.
   */
  fillingType?: "none" | "zero-filling" | "value-filling";
  /*
   * User-Defined Variable Setting: When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.  Unit: User-specified or common.
   *
   * @format float
   */
  fillingValue?: number;
  /*
   * Ex: ion-sad-outline
   */
  iconIcon?: string;
  /*
   * Ex: 95614
   */
  id: number;
  imageUrl?: string;
  /*
   * Ex: https://google.com
   */
  informationalUrl?: string;
  /*
   * Commonly defined for all users. IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.
   */
  ingredientOfCommonTagVariables?: Variable[];
  /*
   * Commonly defined for all users. IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.
   */
  ingredientCommonTagVariables?: Variable[];
  /*
   * User-Defined Variable Setting: IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.
   */
  ingredientOfUserTagVariables?: Variable[];
  /*
   * User-Defined Variable Setting: IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption and we can use this data to see how sugar might be affecting you.
   */
  ingredientUserTagVariables?: Variable[];
  /*
   * Type of input field to show for recording measurements
   */
  inputType?: string;
  ionIcon?: string;
  /*
   * Commonly defined for all users.  Joining can be used used to merge duplicate variables. For instance, if two variables called Apples (Red Delicious) and Red Delicious Apples are joined, when one of them is analyzed, the measurements for the other will be included as well.
   */
  joinedCommonTagVariables?: Variable[];
  /*
   * User-Defined Variable Setting: Joining can be used used to merge duplicate variables. For instance, if two variables called Apples (Red Delicious) and Red Delicious Apples are joined, when one of them is analyzed, the measurements for the other will be included as well.
   */
  joinedUserTagVariables?: Variable[];
  /*
   * Duplicate variables. If the variable is joined with some other variable then it is not shown to user in the list of variables
   *
   * @format int32
   */
  joinWith?: number;
  /*
   * Kurtosis
   *
   * @format float
   */
  kurtosis?: number;
  /*
   * Calculated Statistic: Ex: 500. Unit: User-specified or common.
   *
   * @format double
   */
  lastProcessedDailyValue?: number;
  /*
   * When this variable or its settings were last updated UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  lastSuccessfulUpdateTime?: string;
  /*
   * Calculated Statistic: Last measurement value in the common unit or user unit if different. Unit: User-specified or common.
   *
   * @format float
   */
  lastValue?: number;
  /*
   * Latest filling time
   *
   * @format int32
   */
  latestFillingTime?: number;
  /*
   * Latest measurement time. Format: Unix-time epoch seconds.
   *
   * @format int32
   */
  latestMeasurementTime?: number;
  /*
   * Latest source time. Format: Unix-time epoch seconds.
   *
   * @format int32
   */
  latestSourceTime?: number;
  /*
   * Ex: 1501383600. Format: Unix-time epoch seconds.
   */
  latestUserMeasurementTime?: number;
  /*
   * Latitude. Unit: User-specified or common.
   *
   * @format float
   */
  latitude?: number;
  /*
   * Location
   */
  location?: string;
  /*
   * Longitude
   *
   * @format float
   */
  longitude?: number;
  /*
   * True if the variable is an emotion or symptom rating that is not typically automatically collected by a device or app.
   */
  manualTracking?: boolean;
  /*
   * User-Defined Variable Setting: The maximum allowed value a daily aggregated measurement. Unit: User-specified or common.
   *
   * @format float
   */
  maximumAllowedDailyValue?: number;
  /*
   * User-Defined Variable Setting: The maximum allowed value a single measurement. While you can record a value above this maximum, it will be excluded from the correlation analysis.  Unit: User-specified or common.
   *
   * @format float
   */
  maximumAllowedValue?: number;
  /*
   * Calculated Statistic: Maximum recorded daily value of this variable. Unit: User-specified or common.
   *
   * @format float
   */
  maximumRecordedDailyValue?: number;
  /*
   * Calculated Statistic: Ex: 1. Unit: User-specified or common.
   *
   * @format double
   */
  maximumRecordedValue?: number;
  /*
   * Mean. Unit: User-specified or common.
   *
   * @format float
   */
  mean?: number;
  /*
   * Number of measurements at last analysis
   *
   * @format int32
   */
  measurementsAtLastAnalysis?: number;
  /*
   * Median
   *
   * @format float
   */
  median?: number;
  /*
   * User-Defined Variable Setting: The minimum allowed value a single measurement. While you can record a value below this minimum, it will be excluded from the correlation analysis. Unit: User-specified or common
   *
   * @format float
   */
  minimumAllowedValue?: number;
  /*
   * User-Defined Variable Setting: The minimum allowed value a daily aggregated measurement.  For instance, you might set to 100 for steps to keep erroneous 0 daily steps out of the analysis. Unit: User-specified or common.
   *
   * @format float
   */
  minimumAllowedDailyValue?: number;
  /*
   * User-Defined Variable Setting: The minimum allowed non-zero value a single measurement.  For instance, you might set to 100 mL for steps to keep erroneous 0 daily steps out of the analysis. Unit: User-specified or common.
   *
   * @format float
   */
  minimumNonZeroValue?: number;
  /*
   * Minimum recorded value of this variable. Unit: User-specified or common.
   *
   * @format float
   */
  minimumRecordedValue?: number;
  /*
   * Ex: 51
   */
  mostCommonConnectorId?: number;
  /*
   * Ex: 23
   */
  mostCommonOriginalUnitId?: number;
  /*
   * Most common Unit ID
   *
   * @format int32
   */
  mostCommonUnitId?: number;
  /*
   * Calculated Statistic: Most common value. Unit: User-specified or common.
   *
   * @format float
   */
  mostCommonValue?: number;
  /*
   * Ex: Trader Joes Bedtime Tea / Sleepytime Tea (any Brand)
   */
  name: string;
  /*
   * Ex: 1
   */
  numberOfAggregateCorrelationsAsCause?: number;
  /*
   * Ex: 310
   */
  numberOfAggregateCorrelationsAsEffect?: number;
  /*
   * Number of changes
   *
   * @format int32
   */
  numberOfChanges?: number;
  /*
   * Number of correlations for this variable
   *
   * @format int32
   */
  numberOfCorrelations?: number;
  /*
   * numberOfAggregateCorrelationsAsCause plus numberOfUserCorrelationsAsCause
   */
  numberOfCorrelationsAsCause?: number;
  /*
   * numberOfAggregateCorrelationsAsEffect plus numberOfUserCorrelationsAsEffect
   */
  numberOfCorrelationsAsEffect?: number;
  /*
   * Number of processed measurements
   *
   * @format int32
   */
  numberOfProcessedDailyMeasurements?: number;
  /*
   * Ex: 295
   */
  numberOfRawMeasurements?: number;
  /*
   * Ex: 1
   */
  numberOfTrackingReminders?: number;
  /*
   * Number of unique daily values
   *
   * @format float
   */
  numberOfUniqueDailyValues?: number;
  /*
   * Ex: 2
   */
  numberOfUniqueValues?: number;
  /*
   * Ex: 115
   */
  numberOfUserCorrelationsAsCause?: number;
  /*
   * Ex: 29014
   */
  numberOfUserCorrelationsAsEffect?: number;
  /*
   * Ex: 2
   */
  numberOfUserVariables?: number;
  /*
   * The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
   *
   * @format int32
   */
  onsetDelay?: number;
  /*
   * User-Defined Variable Setting: The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
   *
   * @format double
   */
  onsetDelayInHours?: number;
  /*
   * User-Defined Variable Setting: True for variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables
   */
  outcome?: boolean;
  /*
   * Do you want to receive updates on newly discovered factors influencing this variable?
   */
  outcomeOfInterest?: boolean;
  /*
   * Commonly defined for all users.  An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.
   */
  parentCommonTagVariables?: Variable[];
  /*
   * User-defined. An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake.
   */
  parentUserTagVariables?: Variable[];
  /*
   * Ex: img/variable_categories/treatments.png
   */
  pngPath?: string;
  /*
   * Ex: https://app.curedao.org/img/variable_categories/treatments.png
   */
  pngUrl?: string;
  /*
   * Ex: 0
   */
  predictorOfInterest?: number;
  /*
   * Ex: 95.4
   *
   * @format double
   */
  price?: number;
  /*
   * Link to associated product for purchase
   */
  productUrl?: string;
  /*
   * Should this variable show up in automcomplete searches for users who do not already have measurements for it?
   */
  public?: boolean;
  /*
   * Ex: How is your overall mood?
   */
  question?: string;
  /*
   * Ex: How is your overall mood on a scale of 1 to 5??
   */
  longQuestion?: string;
  /*
   * Ex: 131
   */
  rawMeasurementsAtLastAnalysis?: number;
  /*
   * Calculated Statistic: Ex: 1. Unit: User-specified or common.
   *
   * @format double
   */
  secondMostCommonValue?: number;
  /*
   * Calculated Statistic: Ex: 250. Unit: User-specified or common.
   *
   * @format double
   */
  secondToLastValue?: number;
  /*
   * Would you like to make your measurements publicly visible?
   */
  shareUserMeasurements?: boolean;
  /*
   * Skewness
   *
   * @format float
   */
  skewness?: number;
  /*
   * Standard deviation Ex: 0.46483219855434
   *
   * @format double
   */
  standardDeviation?: number;
  /*
   * status
   */
  status?: string;
  /*
   * Based on sort filter and can be shown beneath variable name on search list
   */
  subtitle?: string;
  /*
   * Ex: https://app.curedao.org/img/variable_categories/treatments.svg
   */
  svgUrl?: string;
  /*
   * Calculated Statistic: Ex: 6. Unit: User-specified or common.
   *
   * @format double
   */
  thirdMostCommonValue?: number;
  /*
   * Calculated Statistic: Ex: 250. Unit: User-specified or common.
   *
   * @format double
   */
  thirdToLastValue?: number;
  /*
   * HTML instructions for tracking
   */
  trackingInstructions?: string;
  trackingInstructionsCard?: Card;
  unit?: Unit;
  /*
   * Ex: count
   */
  unitAbbreviatedName?: string;
  /*
   * Ex: 6
   */
  unitCategoryId?: number;
  /*
   * Ex: Miscellany
   */
  unitCategoryName?: string;
  /*
   * ID of unit to use for this variable
   *
   * @format int32
   */
  unitId?: number;
  /*
   * User-Defined Variable Setting: Count
   */
  unitName?: string;
  /*
   * Universal product code or similar
   */
  upc?: string;
  /*
   * updated
   *
   * @format int32
   */
  updated?: number;
  /*
   * When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format
   */
  updatedAt?: string;
  /*
   * Ex: 2017-07-30 14:58:26
   */
  updatedTime?: string;
  /*
   * User ID
   *
   * @format int32
   */
  userId: number;
  userTaggedVariables?: Variable[];
  userTagVariables?: Variable[];
  /*
   * Ex: count
   */
  userVariableUnitAbbreviatedName?: string;
  /*
   * Ex: 6
   */
  userVariableUnitCategoryId?: number;
  /*
   * Ex: Miscellany
   */
  userVariableUnitCategoryName?: string;
  /*
   * Ex: 23
   */
  userVariableUnitId?: number;
  /*
   * Ex: Count
   */
  userVariableUnitName?: string;
  variableCategory?: VariableCategory;
  /*
   * Array of Variables that are joined with this Variable
   */
  joinedVariables?: Variable[];
  /*
   * Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables.
   */
  valence?: string;
  /*
   * Ex: 6
   */
  variableCategoryId?: number;
  /*
   * User-Defined Variable Setting: Variable category like Emotions, Sleep, Physical Activities, Treatments, Symptoms, etc.
   */
  variableCategoryName?:
    | "Activity"
    | "Books"
    | "Causes of Illness"
    | "Cognitive Performance"
    | "Conditions"
    | "Emotions"
    | "Environment"
    | "Foods"
    | "Goals"
    | "Locations"
    | "Miscellaneous"
    | "Movies and TV"
    | "Music"
    | "Nutrients"
    | "Payments"
    | "Physical Activities"
    | "Physique"
    | "Sleep"
    | "Social Interactions"
    | "Software"
    | "Symptoms"
    | "Treatments"
    | "Vital Signs";
  /*
   * Ex: 96380
   */
  variableId: number;
  /*
   * Ex: Sleep Duration
   */
  variableName?: string;
  /*
   * Statistic: Ex: 115947037.40816
   *
   * @format double
   */
  variance?: number;
  /*
   * User-Defined Variable Setting: You can help to improve the studies by pasting the title of the most appropriate Wikipedia article for this variable
   */
  wikipediaTitle?: string;
};

export type UserVariableDelete = {
  /*
   * Id of the variable whose measurements should be deleted
   */
  variableId: number;
};

export type VariableCategory = {
  /*
   * Ex: mood
   */
  appType?: string;
  /*
   * Ex: false
   */
  causeOnly?: boolean;
  /*
   * Ex: MEAN
   */
  combinationOperation?: string;
  /*
   * UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  createdTime?: string;
  /*
   * Ex: /5
   */
  unitAbbreviatedName?: string;
  /*
   * Ex: 10
   */
  unitId?: number;
  /*
   * User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Seconds
   */
  durationOfAction?: number;
  /*
   * Ex: -1. Unit: Variable category default unit.
   */
  fillingValue?: number;
  /*
   * Ex: What emotion do you want to rate?
   */
  helpText?: string;
  /*
   * Ex: 1
   */
  id?: number;
  /*
   * Ex: https://static.quantimo.do/img/variable_categories/theatre_mask-96.png
   */
  imageUrl?: string;
  /*
   * Ex: ion-happy-outline
   */
  ionIcon?: string;
  /*
   * Ex: true
   */
  manualTracking?: boolean;
  /*
   * Unit: Variable category default unit.
   */
  maximumAllowedValue?: string;
  /*
   * Ex: rating
   */
  measurementSynonymSingularLowercase?: string;
  /*
   * Unit: Variable category default unit.
   */
  minimumAllowedValue?: string;
  /*
   * Ex: Do you have any emotions that fluctuate regularly?  If so, add them so I can try to determine which factors are influencing them.
   */
  moreInfo?: string;
  /*
   * Category name
   */
  name: string;
  /*
   * Ex: 0
   */
  onsetDelay?: number;
  /*
   * Ex: true
   */
  outcome?: boolean;
  /*
   * Ex: img/variable_categories/emotions.png
   */
  pngPath?: string;
  /*
   * Ex: https://app.curedao.org/img/variable_categories/emotions.png
   */
  pngUrl?: string;
  /*
   * Ex: true
   */
  public?: boolean;
  /*
   * Ex: img/variable_categories/emotions.svg
   */
  svgPath?: string;
  /*
   * Ex: https://app.curedao.org/img/variable_categories/emotions.svg
   */
  svgUrl?: string;
  /*
   * Ex: 1
   */
  updated?: number;
  /*
   * UTC ISO 8601 YYYY-MM-DDThh:mm:ss
   */
  updatedTime?: string;
  /*
   * Ex: Emotions, Treatments, Symptoms...
   */
  variableCategoryName?:
    | "Activity"
    | "Books"
    | "Causes of Illness"
    | "Cognitive Performance"
    | "Conditions"
    | "Emotions"
    | "Environment"
    | "Foods"
    | "Goals"
    | "Locations"
    | "Miscellaneous"
    | "Movies and TV"
    | "Music"
    | "Nutrients"
    | "Payments"
    | "Physical Activities"
    | "Physique"
    | "Sleep"
    | "Social Interactions"
    | "Software"
    | "Symptoms"
    | "Treatments"
    | "Vital Signs";
  /*
   * Ex: Emotion
   */
  variableCategoryNameSingular?: string;
};

/**
 * An object with various chart properties each property contain and svg and Highcharts configuration
 */
export type VariableCharts = {
  hourlyColumnChart?: Chart;
  monthlyColumnChart?: Chart;
  distributionColumnChart?: Chart;
  weekdayColumnChart?: Chart;
  lineChartWithoutSmoothing?: Chart;
  lineChartWithSmoothing?: Chart;
};

export type Vote = {
  /*
   * Cause variable id
   */
  causeVariableId: number;
  /*
   * Your CureDAO client id can be obtained by creating an app at https://builder.curedao.org
   */
  clientId: string;
  /*
   * When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format
   */
  createdAt?: string;
  /*
   * Effect variable id
   */
  effectVariableId: number;
  /*
   * id
   *
   * @format int32
   */
  id?: number;
  /*
   * When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format
   */
  updatedAt?: string;
  /*
   * ID of User
   *
   * @format int32
   */
  userId: number;
  /*
   * Vote down for implausible/not-useful or up for plausible/useful. Vote none to delete a previous vote.
   */
  value: "up" | "down" | "none";
  /*
   * Your CureDAO client id can be obtained by creating an app at https://builder.curedao.org
   */
  type?: "causality" | "usefulness";
};
