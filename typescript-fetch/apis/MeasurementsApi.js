"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * CureDAO Unified Health API
 * A platform for participant-centered research and personal data exploration
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetMeasurementsUnitNameEnum = exports.GetMeasurementsVariableCategoryNameEnum = exports.MeasurementsApi = void 0;
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var MeasurementsApi = /** @class */ (function (_super) {
    __extends(MeasurementsApi, _super);
    function MeasurementsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a previously submitted measurement
     * Delete a measurement
     */
    MeasurementsApi.prototype.deleteMeasurementRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["writemeasurements"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/measurements/delete",
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.CommonResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Delete a previously submitted measurement
     * Delete a measurement
     */
    MeasurementsApi.prototype.deleteMeasurement = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteMeasurementRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
     * Get measurements for this user
     */
    MeasurementsApi.prototype.getMeasurementsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.variableName !== undefined) {
                            queryParameters['variableName'] = requestParameters.variableName;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.variableCategoryName !== undefined) {
                            queryParameters['variableCategoryName'] = requestParameters.variableCategoryName;
                        }
                        if (requestParameters.updatedAt !== undefined) {
                            queryParameters['updatedAt'] = requestParameters.updatedAt;
                        }
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        if (requestParameters.sourceName !== undefined) {
                            queryParameters['sourceName'] = requestParameters.sourceName;
                        }
                        if (requestParameters.connectorName !== undefined) {
                            queryParameters['connectorName'] = requestParameters.connectorName;
                        }
                        if (requestParameters.value !== undefined) {
                            queryParameters['value'] = requestParameters.value;
                        }
                        if (requestParameters.unitName !== undefined) {
                            queryParameters['unitName'] = requestParameters.unitName;
                        }
                        if (requestParameters.earliestMeasurementTime !== undefined) {
                            queryParameters['earliestMeasurementTime'] = requestParameters.earliestMeasurementTime;
                        }
                        if (requestParameters.latestMeasurementTime !== undefined) {
                            queryParameters['latestMeasurementTime'] = requestParameters.latestMeasurementTime;
                        }
                        if (requestParameters.createdAt !== undefined) {
                            queryParameters['createdAt'] = requestParameters.createdAt;
                        }
                        if (requestParameters.id !== undefined) {
                            queryParameters['id'] = requestParameters.id;
                        }
                        if (requestParameters.groupingWidth !== undefined) {
                            queryParameters['groupingWidth'] = requestParameters.groupingWidth;
                        }
                        if (requestParameters.groupingTimezone !== undefined) {
                            queryParameters['groupingTimezone'] = requestParameters.groupingTimezone;
                        }
                        if (requestParameters.doNotProcess !== undefined) {
                            queryParameters['doNotProcess'] = requestParameters.doNotProcess;
                        }
                        if (requestParameters.clientId !== undefined) {
                            queryParameters['clientId'] = requestParameters.clientId;
                        }
                        if (requestParameters.doNotConvert !== undefined) {
                            queryParameters['doNotConvert'] = requestParameters.doNotConvert;
                        }
                        if (requestParameters.minMaxFilter !== undefined) {
                            queryParameters['minMaxFilter'] = requestParameters.minMaxFilter;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["readmeasurements"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/measurements",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.MeasurementFromJSON); })];
                }
            });
        });
    };
    /**
     * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
     * Get measurements for this user
     */
    MeasurementsApi.prototype.getMeasurements = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMeasurementsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     * Post Request for Measurements CSV
     */
    MeasurementsApi.prototype.measurementExportRequestRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v2/measurements/exportRequest",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.TextApiResponse(response)];
                }
            });
        });
    };
    /**
     * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     * Post Request for Measurements CSV
     */
    MeasurementsApi.prototype.measurementExportRequest = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.measurementExportRequestRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
     * Post a new set or update existing measurements to the database
     */
    MeasurementsApi.prototype.postMeasurementsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling postMeasurements.');
                        }
                        queryParameters = {};
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["writemeasurements"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/measurements/post",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body.map(models_1.MeasurementSetToJSON),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.PostMeasurementsResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
     * Post a new set or update existing measurements to the database
     */
    MeasurementsApi.prototype.postMeasurements = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postMeasurementsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update a previously submitted measurement
     * Update a measurement
     */
    MeasurementsApi.prototype.updateMeasurementRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, token, tokenString, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.body === null || requestParameters.body === undefined) {
                            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling updateMeasurement.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.accessToken) {
                            token = this.configuration.accessToken;
                            tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;
                            if (tokenString) {
                                headerParameters["Authorization"] = "Bearer ".concat(tokenString);
                            }
                        }
                        if (this.configuration && this.configuration.accessToken) {
                            // oauth required
                            if (typeof this.configuration.accessToken === 'function') {
                                headerParameters["Authorization"] = this.configuration.accessToken("curedao_oauth2", ["basic"]);
                            }
                            else {
                                headerParameters["Authorization"] = this.configuration.accessToken;
                            }
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v3/measurements/update",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, models_1.MeasurementUpdateToJSON)(requestParameters.body),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.CommonResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update a previously submitted measurement
     * Update a measurement
     */
    MeasurementsApi.prototype.updateMeasurement = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateMeasurementRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return MeasurementsApi;
}(runtime.BaseAPI));
exports.MeasurementsApi = MeasurementsApi;
/**
    * @export
    * @enum {string}
    */
var GetMeasurementsVariableCategoryNameEnum;
(function (GetMeasurementsVariableCategoryNameEnum) {
    GetMeasurementsVariableCategoryNameEnum["Activities"] = "Activities";
    GetMeasurementsVariableCategoryNameEnum["Books"] = "Books";
    GetMeasurementsVariableCategoryNameEnum["CausesOfIllness"] = "Causes of Illness";
    GetMeasurementsVariableCategoryNameEnum["CognitivePerformance"] = "Cognitive Performance";
    GetMeasurementsVariableCategoryNameEnum["Conditions"] = "Conditions";
    GetMeasurementsVariableCategoryNameEnum["Emotions"] = "Emotions";
    GetMeasurementsVariableCategoryNameEnum["Environment"] = "Environment";
    GetMeasurementsVariableCategoryNameEnum["Foods"] = "Foods";
    GetMeasurementsVariableCategoryNameEnum["Location"] = "Location";
    GetMeasurementsVariableCategoryNameEnum["Miscellaneous"] = "Miscellaneous";
    GetMeasurementsVariableCategoryNameEnum["MoviesAndTv"] = "Movies and TV";
    GetMeasurementsVariableCategoryNameEnum["Music"] = "Music";
    GetMeasurementsVariableCategoryNameEnum["Nutrients"] = "Nutrients";
    GetMeasurementsVariableCategoryNameEnum["Payments"] = "Payments";
    GetMeasurementsVariableCategoryNameEnum["PhysicalActivity"] = "Physical Activity";
    GetMeasurementsVariableCategoryNameEnum["Physique"] = "Physique";
    GetMeasurementsVariableCategoryNameEnum["Sleep"] = "Sleep";
    GetMeasurementsVariableCategoryNameEnum["SocialInteractions"] = "Social Interactions";
    GetMeasurementsVariableCategoryNameEnum["Software"] = "Software";
    GetMeasurementsVariableCategoryNameEnum["Symptoms"] = "Symptoms";
    GetMeasurementsVariableCategoryNameEnum["Treatments"] = "Treatments";
    GetMeasurementsVariableCategoryNameEnum["VitalSigns"] = "Vital Signs";
    GetMeasurementsVariableCategoryNameEnum["Goals"] = "Goals";
})(GetMeasurementsVariableCategoryNameEnum = exports.GetMeasurementsVariableCategoryNameEnum || (exports.GetMeasurementsVariableCategoryNameEnum = {}));
/**
    * @export
    * @enum {string}
    */
var GetMeasurementsUnitNameEnum;
(function (GetMeasurementsUnitNameEnum) {
    GetMeasurementsUnitNameEnum["RecommendedDailyAllowance"] = "% Recommended Daily Allowance";
    GetMeasurementsUnitNameEnum["_4To4Rating"] = "-4 to 4 Rating";
    GetMeasurementsUnitNameEnum["_0To1Rating"] = "0 to 1 Rating";
    GetMeasurementsUnitNameEnum["_0To5Rating"] = "0 to 5 Rating";
    GetMeasurementsUnitNameEnum["_1To10Rating"] = "1 to 10 Rating";
    GetMeasurementsUnitNameEnum["_1To5Rating"] = "1 to 5 Rating";
    GetMeasurementsUnitNameEnum["Applications"] = "Applications";
    GetMeasurementsUnitNameEnum["BeatsPerMinute"] = "Beats per Minute";
    GetMeasurementsUnitNameEnum["Calories"] = "Calories";
    GetMeasurementsUnitNameEnum["Capsules"] = "Capsules";
    GetMeasurementsUnitNameEnum["Centimeters"] = "Centimeters";
    GetMeasurementsUnitNameEnum["Count"] = "Count";
    GetMeasurementsUnitNameEnum["DegreesCelsius"] = "Degrees Celsius";
    GetMeasurementsUnitNameEnum["DegreesEast"] = "Degrees East";
    GetMeasurementsUnitNameEnum["DegreesFahrenheit"] = "Degrees Fahrenheit";
    GetMeasurementsUnitNameEnum["DegreesNorth"] = "Degrees North";
    GetMeasurementsUnitNameEnum["Dollars"] = "Dollars";
    GetMeasurementsUnitNameEnum["Drops"] = "Drops";
    GetMeasurementsUnitNameEnum["Event"] = "Event";
    GetMeasurementsUnitNameEnum["Feet"] = "Feet";
    GetMeasurementsUnitNameEnum["Grams"] = "Grams";
    GetMeasurementsUnitNameEnum["Hours"] = "Hours";
    GetMeasurementsUnitNameEnum["Inches"] = "Inches";
    GetMeasurementsUnitNameEnum["Index"] = "Index";
    GetMeasurementsUnitNameEnum["Kilocalories"] = "Kilocalories";
    GetMeasurementsUnitNameEnum["Kilograms"] = "Kilograms";
    GetMeasurementsUnitNameEnum["Kilometers"] = "Kilometers";
    GetMeasurementsUnitNameEnum["Liters"] = "Liters";
    GetMeasurementsUnitNameEnum["Meters"] = "Meters";
    GetMeasurementsUnitNameEnum["Micrograms"] = "Micrograms";
    GetMeasurementsUnitNameEnum["MicrogramsPerDecilitre"] = "Micrograms per decilitre";
    GetMeasurementsUnitNameEnum["Miles"] = "Miles";
    GetMeasurementsUnitNameEnum["Milligrams"] = "Milligrams";
    GetMeasurementsUnitNameEnum["Milliliters"] = "Milliliters";
    GetMeasurementsUnitNameEnum["Millimeters"] = "Millimeters";
    GetMeasurementsUnitNameEnum["MillimetersMerc"] = "Millimeters Merc";
    GetMeasurementsUnitNameEnum["Milliseconds"] = "Milliseconds";
    GetMeasurementsUnitNameEnum["Minutes"] = "Minutes";
    GetMeasurementsUnitNameEnum["Pascal"] = "Pascal";
    GetMeasurementsUnitNameEnum["Percent"] = "Percent";
    GetMeasurementsUnitNameEnum["Pieces"] = "Pieces";
    GetMeasurementsUnitNameEnum["Pills"] = "Pills";
    GetMeasurementsUnitNameEnum["Pounds"] = "Pounds";
    GetMeasurementsUnitNameEnum["Puffs"] = "Puffs";
    GetMeasurementsUnitNameEnum["Seconds"] = "Seconds";
    GetMeasurementsUnitNameEnum["Serving"] = "Serving";
    GetMeasurementsUnitNameEnum["Sprays"] = "Sprays";
    GetMeasurementsUnitNameEnum["Tablets"] = "Tablets";
    GetMeasurementsUnitNameEnum["Torr"] = "Torr";
    GetMeasurementsUnitNameEnum["Units"] = "Units";
    GetMeasurementsUnitNameEnum["YesNo"] = "Yes/No";
    GetMeasurementsUnitNameEnum["PerMinute"] = "per Minute";
    GetMeasurementsUnitNameEnum["Doses"] = "Doses";
    GetMeasurementsUnitNameEnum["Quarts"] = "Quarts";
    GetMeasurementsUnitNameEnum["Ounces"] = "Ounces";
    GetMeasurementsUnitNameEnum["InternationalUnits"] = "International Units";
    GetMeasurementsUnitNameEnum["MetersPerSecond"] = "Meters per Second";
})(GetMeasurementsUnitNameEnum = exports.GetMeasurementsUnitNameEnum || (exports.GetMeasurementsUnitNameEnum = {}));
//# sourceMappingURL=MeasurementsApi.js.map